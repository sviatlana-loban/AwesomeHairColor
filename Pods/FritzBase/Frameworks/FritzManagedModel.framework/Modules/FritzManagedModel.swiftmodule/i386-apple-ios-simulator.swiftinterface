// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FritzManagedModel
import CommonCrypto
import CoreML
import Foundation
import FritzCore
@_exported import FritzManagedModel
import Swift
@available(iOS 11.0, *)
public protocol AnnotationRepresentable {
  associatedtype Source
  associatedtype Annotation : FritzManagedModel.AnnotationType
  func annotations(for input: Self.Source) -> [Self.Annotation]
}
@available(iOS 11.0, *)
extension Array : FritzManagedModel.AnnotationRepresentable where Element : FritzManagedModel.AnnotationRepresentable {
  public func annotations(for input: Element.Source) -> [Element.Annotation]
  public typealias Source = Element.Source
  public typealias Annotation = Element.Annotation
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
@objc(FritzReadModelProvider) public protocol ReadModelProvider {
  @objc var model: CoreML.MLModel { get }
  @objc(urlOfModelInThisBundle) optional static var urlOfModelInThisBundle: Foundation.URL { get }
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
@objc(FritzReadWriteModelProvider) public protocol ReadWriteModelProvider : FritzManagedModel.ReadModelProvider {
  @objc var model: CoreML.MLModel { get set }
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
@objc(FritzBaseIdentifiedModel) public protocol BaseIdentifiedModel : AnyObject, FritzManagedModel.ReadModelProvider {
  @objc(fritzModelIdentifier) static var modelIdentifier: Swift.String { get }
  @objc(fritzPackagedModelVersion) static var packagedModelVersion: Swift.Int { get }
  @objc(fritzPinnedModelVersion) optional static var pinnedModelVersion: Swift.Int { get }
  @objc(fritzEncryptionSeed) optional static var encryptionSeed: [Swift.UInt8] { get }
  @objc(fritzConfiguration) optional static var configuration: FritzCore.Configuration { get }
  @objc(fritzWifiRequiredForDownload) optional static var wifiRequiredForDownload: Swift.Bool { get }
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
extension BaseIdentifiedModel {
  public var identifier: Swift.String {
    get
  }
  public var encryptionSeed: [Swift.UInt8]? {
    get
  }
  public var configuration: FritzCore.Configuration {
    get
  }
  public var packagedModelVersion: Swift.Int {
    get
  }
  public var pinnedModelVersion: Swift.Int? {
    get
  }
  public var wifiRequiredForDownload: Swift.Bool {
    get
  }
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
@objc(FritzSwiftIdentifiedModel) public protocol SwiftIdentifiedModel : FritzManagedModel.BaseIdentifiedModel, FritzManagedModel.ReadWriteModelProvider {
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
extension SwiftIdentifiedModel {
  public func fritz() -> Self
  public func updateIfNeeded(completionHandler: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  public static func updateIfNeeded(completionHandler: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
extension SwiftIdentifiedModel {
  public static func download(completionHandler: @escaping (Foundation.URL?) -> Swift.Void)
}
@objc(FritzObjcIdentifiedModel) public protocol ObjcIdentifiedModel : FritzManagedModel.BaseIdentifiedModel {
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
extension NSObject {
  @objc(fritz) dynamic public func fritz() -> Self
  @objc(updateIfNeeded) dynamic public func updateIfNeeded()
  @objc(updateIfNeeded) public static func updateIfNeeded()
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
public struct ActiveServerModels : Swift.Codable, Swift.Equatable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: FritzManagedModel.ActiveServerModels, b: FritzManagedModel.ActiveServerModels) -> Swift.Bool
}
public typealias ModelMetadata = [Swift.String : Swift.String]
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
@objc(FritzModelConfiguration) public class FritzModelConfiguration : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let identifier: Swift.String
  @objc final public let version: Swift.Int
  public var pinnedVersion: Swift.Int?
  @objc public var tags: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc public var metadata: FritzManagedModel.ModelMetadata? {
    @objc get
    @objc set
  }
  @objc public var wifiRequiredForModelDownload: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var cpuAndGPUOnly: Swift.Bool {
    @objc get
  }
  @objc public var isOTA: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc(initWithIdentifier:version:encryptionSeed:src:tags:isWifiRequiredForDownloads:metadata:cpuAndGPUOnly:) public init(identifier: Swift.String, version: Swift.Int, encryptionSeed: [Swift.UInt8]?, src: Foundation.URL?, tags: [Swift.String]?, wifiRequiredForModelDownload: Swift.Bool, metadata: FritzManagedModel.ModelMetadata?, cpuAndGPUOnly: Swift.Bool)
  @objc(initWithIdentifier:version:pinnedVersion:encryptionSeed:src:tags:isWifiRequiredForDownloads:metadata:cpuAndGPUOnly:) public init(identifier: Swift.String, version: Swift.Int, pinnedVersion: Swift.Int, encryptionSeed: [Swift.UInt8]?, src: Foundation.URL?, tags: [Swift.String]?, wifiRequiredForModelDownload: Swift.Bool, metadata: FritzManagedModel.ModelMetadata?, cpuAndGPUOnly: Swift.Bool)
  @objc(initWithIdentifier:version:cpuAndGPUOnly:) convenience public init(identifier: Swift.String, version: Swift.Int, cpuAndGPUOnly: Swift.Bool = false)
  @objc(initWithIdentifier:version:pinnedVersion:cpuAndGPUOnly:) convenience public init(identifier: Swift.String, version: Swift.Int, pinnedVersion: Swift.Int, cpuAndGPUOnly: Swift.Bool = false)
  @objc(initFromIdentifiedModel:) convenience public init(from identifiedModel: FritzManagedModel.BaseIdentifiedModel)
  @objc(initFromIdentifiedModelType:) convenience public init(from identifiedModelType: FritzManagedModel.BaseIdentifiedModel.Type)
  @objc(isEqual:) override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@available(iOS 11.0, *)
extension FritzModelConfiguration {
  @objc(buildManagedModel) dynamic public func buildManagedModel() -> FritzManagedModel.FritzManagedModel
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
@objc(ModelTagManager) public class ModelTagManager : ObjectiveC.NSObject {
  @objc final public let tags: [Swift.String]
  @objc(initWithTags:sessionManager:) public init(tags: [Swift.String], sessionManager: FritzCore.SessionManager? = nil)
  @objc(getModelsForTagsWithWifiRequired:) public func getManagedModelsForTags(wifiRequiredForModelDownload: Swift.Bool = false) -> [FritzManagedModel.FritzManagedModel]
  @objc(fetchModelsForTagsWithWifiRequired:completionHandler:) public func fetchManagedModelsForTags(wifiRequiredForModelDownload: Swift.Bool = false, completionHandler: @escaping ([FritzManagedModel.FritzManagedModel]?, Swift.Error?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
extension SessionManager {
  final public func download(_ modelConfig: FritzManagedModel.FritzModelConfiguration, completionHandler: @escaping (Foundation.URL?) -> Swift.Void)
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
@objc(FritzMLModel) final public class FritzMLModel : CoreML.MLModel {
  @objc final public var activeModelConfig: FritzManagedModel.FritzModelConfiguration {
    get
    }
  final public var id: Swift.String {
    get
  }
  final public var version: Swift.Int {
    get
  }
  unowned final public let sessionManager: FritzCore.SessionManager
  final public var model: CoreML.MLModel {
    get
    }
  @objc(initWithIdentifiedModel:config:sessionManager:) public init(model: CoreML.MLModel, activeModelConfig: FritzManagedModel.FritzModelConfiguration, sessionManager: FritzCore.SessionManager)
  @objc deinit
  @objc override final public var modelDescription: CoreML.MLModelDescription {
    @objc get
  }
  @objc(predictionFromFeatures:error:) override final public func prediction(from input: CoreML.MLFeatureProvider) throws -> CoreML.MLFeatureProvider
  @objc(predictionFromFeatures:options:error:) override final public func prediction(from input: CoreML.MLFeatureProvider, options: CoreML.MLPredictionOptions) throws -> CoreML.MLFeatureProvider
  @objc override dynamic public init()
}
public enum FritzManagedModelError : Swift.Error {
  case loadingSavedModelFailed
  public static func == (a: FritzManagedModel.FritzManagedModelError, b: FritzManagedModel.FritzManagedModelError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
@objcMembers public class FritzManagedModel : ObjectiveC.NSObject {
  @objc public var activeModelConfig: FritzManagedModel.FritzModelConfiguration {
    get
    }
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public var version: Swift.Int {
    @objc get
  }
  @objc public var isVersionDownloaded: Swift.Bool {
    @objc get
  }
  @objc public var hasDownloadedModel: Swift.Bool {
    @objc get
  }
  @objc final public let packagedIdentifiedModelType: FritzManagedModel.BaseIdentifiedModel.Type?
  @objc deinit
  @objc(initWithModelConfig:sessionManager:loadActive:packagedModelType:) public init(modelConfig: FritzManagedModel.FritzModelConfiguration, sessionManager: FritzCore.SessionManager? = nil, loadActiveFromDisk: Swift.Bool = true, packagedIdentifiedModelType: FritzManagedModel.BaseIdentifiedModel.Type? = nil)
  @objc(initWithIdentifiedModel:) convenience public init(identifiedModel: FritzManagedModel.BaseIdentifiedModel)
  @objc(initWithIdentifiedModelType:) convenience public init(identifiedModelType: FritzManagedModel.BaseIdentifiedModel.Type)
  @objc public func delete() throws
  @objc override dynamic public init()
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
extension FritzManagedModel {
  @objc dynamic public func loadModel(identifiedModel: FritzManagedModel.BaseIdentifiedModel) -> FritzManagedModel.FritzMLModel
  @objc dynamic public func loadModel() -> FritzManagedModel.FritzMLModel?
  @objc dynamic public func fetchModel(completionHandler: @escaping (FritzManagedModel.FritzMLModel?, Swift.Error?) -> Swift.Void)
  @objc dynamic public func startDownload()
}
@available(OSX 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
extension FritzManagedModel {
  @objc dynamic public func updateModelIfNeeded(skipCache: Swift.Bool = false, completionHandler: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
}
@available(iOS 11.0, *)
public class DataAnnotationRecording<AnnotationRepresentation> where AnnotationRepresentation : FritzManagedModel.AnnotationRepresentable, AnnotationRepresentation.Source : FritzManagedModel.Base64StringEncodable {
  public init(input: AnnotationRepresentation.Source, modelConfig: FritzManagedModel.FritzModelConfiguration, predicted predictionRepresentation: AnnotationRepresentation, modified modifiedRepresentation: AnnotationRepresentation? = nil)
  public func event() throws -> FritzCore.SessionEvent
  @objc deinit
}
public struct CocoImageAnnotation : Swift.Codable, FritzManagedModel.AnnotationType {
  public enum KeypointVisibility : Swift.Int, Swift.Codable {
    case notLabeled
    case labeledByNotVisible
    case labeledAndVisible
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct BoundingBox : Swift.Codable {
    public init(xmin: CoreGraphics.CGFloat, ymin: CoreGraphics.CGFloat, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Keypoint : Swift.Codable {
    public init(x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat, visibility: FritzManagedModel.CocoImageAnnotation.KeypointVisibility)
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public let bbox: FritzManagedModel.CocoImageAnnotation.BoundingBox
  public let keypoints: [FritzManagedModel.CocoImageAnnotation.Keypoint?]
  public let format: FritzManagedModel.AnnotationFormat
  public init(bbox: FritzManagedModel.CocoImageAnnotation.BoundingBox, keypoints: [FritzManagedModel.CocoImageAnnotation.Keypoint?])
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol RNCryptorType {
  init(password: Swift.String)
  func update(withData data: Foundation.Data) throws -> Foundation.Data
  func finalData() throws -> Foundation.Data
}
public enum RNCryptor {
  public enum Error : Swift.Int, Swift.Error {
    case hmacMismatch
    case unknownHeader
    case messageTooShort
    case memoryFailure
    case invalidCredentialType
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func encrypt(data: Foundation.Data, withPassword password: Swift.String) -> Foundation.Data
  public static func decrypt(data: Foundation.Data, withPassword password: Swift.String) throws -> Foundation.Data
  public static func randomData(ofLength length: Swift.Int) -> Foundation.Data
  final public class Encryptor : FritzManagedModel.RNCryptorType {
    public init(password: Swift.String)
    final public func update(withData data: Foundation.Data) -> Foundation.Data
    final public func finalData() -> Foundation.Data
    final public func encrypt(data: Foundation.Data) -> Foundation.Data
    @objc deinit
  }
  final public class Decryptor : FritzManagedModel.RNCryptorType {
    public init(password: Swift.String)
    final public func decrypt(data: Foundation.Data) throws -> Foundation.Data
    final public func update(withData data: Foundation.Data) throws -> Foundation.Data
    final public func finalData() throws -> Foundation.Data
    @objc deinit
  }
}
extension RNCryptor {
  final public class FormatV3 {
    public static let keySize: Swift.Int
    public static let saltSize: Swift.Int
    public static func makeKey(forPassword password: Swift.String, withSalt salt: Foundation.Data) -> Foundation.Data
    @objc deinit
  }
  final public class EncryptorV3 : FritzManagedModel.RNCryptorType {
    convenience public init(password: Swift.String)
    convenience public init(encryptionKey: Foundation.Data, hmacKey: Foundation.Data)
    final public func encrypt(data: Foundation.Data) -> Foundation.Data
    final public func update(withData data: Foundation.Data) -> Foundation.Data
    final public func finalData() -> Foundation.Data
    @objc deinit
  }
  final public class DecryptorV3 {
    public init(password: Swift.String)
    public init(encryptionKey: Foundation.Data, hmacKey: Foundation.Data)
    final public func decrypt(data: Foundation.Data) throws -> Foundation.Data
    final public func update(withData data: Foundation.Data) throws -> Foundation.Data
    final public func finalData() throws -> Foundation.Data
    @objc deinit
  }
}
@available(iOS 11.0, *)
public struct ModelDebugOutput<T> where T : Swift.RawRepresentable, T.RawValue == Swift.String {
  public let prefix: Swift.String
  public init(prefix: Swift.String)
  public subscript(key: T) -> Any? {
    get
    set
  }
  public var image: UIKit.UIImage? {
    get
    set
  }
  public func write()
  public func toData() -> Foundation.Data?
}
public protocol AnnotationType {
  var format: FritzManagedModel.AnnotationFormat { get }
}
public enum AnnotationFormat : Swift.String, Swift.RawRepresentable, Swift.Codable {
  case coco
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum EncodedFormat : Swift.String, Swift.RawRepresentable {
  case image
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public protocol Base64StringEncodable {
  func encode() throws -> Swift.String
  var encodedFormat: FritzManagedModel.EncodedFormat { get }
}
extension FritzManagedModel.FritzManagedModelError : Swift.Equatable {}
extension FritzManagedModel.FritzManagedModelError : Swift.Hashable {}
extension FritzManagedModel.CocoImageAnnotation.KeypointVisibility : Swift.Equatable {}
extension FritzManagedModel.CocoImageAnnotation.KeypointVisibility : Swift.Hashable {}
extension FritzManagedModel.CocoImageAnnotation.KeypointVisibility : Swift.RawRepresentable {}
extension FritzManagedModel.RNCryptor.Error : Swift.Equatable {}
extension FritzManagedModel.RNCryptor.Error : Swift.Hashable {}
extension FritzManagedModel.RNCryptor.Error : Swift.RawRepresentable {}
extension FritzManagedModel.RNCryptor.DecryptorV3 : FritzManagedModel.RNCryptorType {}
extension FritzManagedModel.AnnotationFormat : Swift.Equatable {}
extension FritzManagedModel.AnnotationFormat : Swift.Hashable {}
extension FritzManagedModel.EncodedFormat : Swift.Equatable {}
extension FritzManagedModel.EncodedFormat : Swift.Hashable {}
