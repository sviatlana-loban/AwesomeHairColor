#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreML;
@import CoreMedia;
@import CoreVideo;
@import ImageIO;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FritzVision",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif









@class FritzManagedModel;
@class FritzMLModel;
@protocol FritzSwiftIdentifiedModel;

SWIFT_CLASS("_TtC11FritzVision13BasePredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface BasePredictor : NSObject
@property (nonatomic, readonly, strong) FritzManagedModel * _Nonnull managedModel;
/// Initialize model with FritzMLModel
/// \param model FritzMLModel
///
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
/// Initialize model with FritzMLModel
/// \param model FritzMLModel
///
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
/// Model metadata set in webapp.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Model tags set in webapp.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// BoundingBox Contains coordinates to draw bounding boxes on images as predicted directly by the model.  However, because of cropping or resizing done to accomadate model size constraints, the default values may not map to coordinates in your view.  Use the toCGRect functions to convert bounding box coordinates to fit the image.
SWIFT_CLASS_NAMED("BoundingBox")
@interface BoundingBox : NSObject
- (nonnull instancetype)initWithYMin:(double)yMin xMin:(double)xMin yMax:(double)yMax xMax:(double)xMax OBJC_DESIGNATED_INITIALIZER;
- (CGRect)imgHeight:(double)imgHeight imgWidth:(double)imgWidth SWIFT_WARN_UNUSED_RESULT;
- (CGRect)imgHeight:(double)imgHeight imgWidth:(double)imgWidth xOffset:(double)xOffset yOffset:(double)yOffset SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CALayer;
@class UIColor;

SWIFT_CLASS_NAMED("BoundingBoxOutline")
@interface BoundingBoxOutline : NSObject
/// Add shape and text to parent layer
/// \param parent parent CALayer
///
- (void)parent:(CALayer * _Nonnull)parent;
/// Show Bounding box.
/// \param frame CGRect of coordinates to draw box
///
/// \param label Classified label
///
/// \param color Color of bounding box outline
///
/// \param textColor Classified label text
///
- (void)frame:(CGRect)frame label:(NSString * _Nonnull)label color:(UIColor * _Nonnull)color textColor:(UIColor * _Nonnull)textColor;
/// Hide bounding box from appearing in view.
- (void)hide;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CIContext;
@class CIImage;
enum ResizeSamplingMethod : NSInteger;

SWIFT_CLASS("_TtC11FritzVision15CIImagePipeline") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline : NSObject
/// Image context used to render CIImage pipeline
@property (nonatomic, readonly, strong) CIContext * _Nonnull context;
/// Current CIImage.
@property (nonatomic, strong) CIImage * _Nonnull image;
/// Sampling method use when resizing images.  Defaults to <code>.affine</code>, which is the fastest but produces the most artifacts.
@property (nonatomic) enum ResizeSamplingMethod resizeSamplingMethod;
/// Create <code>CIImagePipeline</code>
/// \param image Input CIImage
///
/// \param context CIImage context. If not provided, uses FritzVisionImage shared context.
///
- (nonnull instancetype)init:(CIImage * _Nonnull)image context:(CIContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
/// Render current CIImage to pixelBuffer
- (CVPixelBufferRef _Nullable)render SWIFT_WARN_UNUSED_RESULT;
- (CVPixelBufferRef _Nullable)emptyPixelBuffer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Sampling method used to resize image.
typedef SWIFT_ENUM_NAMED(NSInteger, ResizeSamplingMethod, "ResizeSamplingMethod", open) {
/// Lanczos Sampling method
  ResizeSamplingMethodLanczos = 0,
/// Bicubic Sampling method.
  ResizeSamplingMethodBicubic = 1,
/// Affine transformation resampling. This is the fastest method but results in more edge artifacts.
  ResizeSamplingMethodAffine = 2,
};

@class UIImage;
enum FritzSegmentationRegion : NSInteger;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline (SWIFT_EXTENSION(FritzVision))
/// Mask image using a single class alpha RGBA mask.
/// \param alphaMask RGBA alpha mask
///
/// \param segmentationRegion Region of image to remove.  <code>background</code> removes all areas
/// where alpha value of mask is 0.
///
- (void)maskWith:(UIImage * _Nonnull)alphaMask removing:(enum FritzSegmentationRegion)segmentationRegion;
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline (SWIFT_EXTENSION(FritzVision))
- (void)maskWith:(AVDepthData * _Nonnull)depthData focusingAtDepth:(CGFloat)depth focalWidth:(CGFloat)focalWidth;
- (void)maskWith:(AVDepthData * _Nonnull)depthData pixelsFartherThan:(CGFloat)depth;
- (void)maskWith:(AVDepthData * _Nonnull)depthData pixelsCloserThan:(CGFloat)depth;
- (void)blurWith:(AVDepthData * _Nonnull)depthData focusedAt:(CGFloat)depth focalWidth:(CGFloat)focalWidth blurRadius:(CGFloat)blurRadius;
- (void)blurWithPixelsFartherThan:(CGFloat)depth using:(AVDepthData * _Nonnull)depthData blurRadius:(CGFloat)blurRadius;
- (void)blurWithPixelsCloserThan:(CGFloat)depth using:(AVDepthData * _Nonnull)depthData blurRadius:(CGFloat)blurRadius;
@end

@class CIBlendKernel;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline (SWIFT_EXTENSION(FritzVision))
/// Center Crop Image
- (void)centerCrop;
/// Orients image from given orientation to up orientation.
/// \param orientation Orientation
///
- (void)orient:(CGImagePropertyOrientation)orientation;
/// Blends image with provided mask.
/// \param mask Alpha matting mask to blend image with
///
/// \param kernel Blend kernel used to blend mask with background image.
///
/// \param opacity Opacity of mask [0.0 - 1.0] overlayed on source image.
///
- (void)blendWith:(UIImage * _Nonnull)mask blendKernel:(CIBlendKernel * _Nonnull)kernel opacity:(CGFloat)opacity;
- (CIImage * _Nullable)changeOpacityOn:(CIImage * _Nonnull)image to:(CGFloat)opacity SWIFT_WARN_UNUSED_RESULT;
/// Blurs image.
/// \param blurRadius Pixel radius of the blur kernel
///
- (void)blurWithBlurRadius:(CGFloat)blurRadius;
@end


SWIFT_CLASS_NAMED("FlexibleModelDimensions")
@interface FlexibleModelDimensions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithWidth:(NSInteger)width withHeight:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
@end


@interface FlexibleModelDimensions (SWIFT_EXTENSION(FritzVision))
/// Use original image dimensions.  Model will throw an error if image dimensions are not within range of acceptable input sizes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull original;)
+ (FlexibleModelDimensions * _Nonnull)original SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull lowResolution;)
+ (FlexibleModelDimensions * _Nonnull)lowResolution SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull mediumResolution;)
+ (FlexibleModelDimensions * _Nonnull)mediumResolution SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull highResolution;)
+ (FlexibleModelDimensions * _Nonnull)highResolution SWIFT_WARN_UNUSED_RESULT;
@end

/// Describes the orientation of the image. The orientations match the <a href="https://developer.apple.com/documentation/imageio/cgimagepropertyorientation">CGImagePropertyOrientation</a> Enumeration from Apple. Refer to that documentation for clear descriptions of each case.
typedef SWIFT_ENUM(int32_t, FritzImageOrientation, open) {
  FritzImageOrientationUp = 1,
  FritzImageOrientationUpMirrored = 2,
  FritzImageOrientationDown = 3,
  FritzImageOrientationDownMirrored = 4,
  FritzImageOrientationLeftMirrored = 5,
  FritzImageOrientationRight = 6,
  FritzImageOrientationRightMirrored = 7,
  FritzImageOrientationLeft = 8,
};

@class NSCoder;

SWIFT_CLASS("_TtC11FritzVision14FritzVideoView") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVideoView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Initialize as an empty view.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



typedef SWIFT_ENUM_NAMED(NSInteger, FritzVisionCropAndScale, "FritzVisionCropAndScale", open) {
  FritzVisionCropAndScaleCenterCrop = 1,
  FritzVisionCropAndScaleScaleFill = 2,
  FritzVisionCropAndScaleScaleFit = 3,
};

@class FritzVisionImage;
@class FritzVisionDepthModelOptions;

SWIFT_CLASS_NAMED("FritzVisionDepthModel") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionDepthModel : BasePredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Run image segmentation on a FritzVisionDepthMap.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request.
/// Contains a FritzVisionDepthMap or error message.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionDepthModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(AVDepthData * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS_NAMED("FritzVisionDepthModelOptions")
@interface FritzVisionDepthModelOptions : NSObject
/// Crop and scale option. Default value is scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, FritzVisionError, open) {
  FritzVisionErrorInvalidImageBuffer = 0,
  FritzVisionErrorErrorProcessingImage = 1,
  FritzVisionErrorImageNotEncodable = 2,
};
static NSString * _Nonnull const FritzVisionErrorDomain = @"FritzVision.FritzVisionError";

@class FritzVisionStyleModelOptions;

/// Construct a Flexible Style Transfer model and run on any FritzVisionImage.
/// Produces stylized images with customizable output sizes.
SWIFT_CLASS_NAMED("FritzVisionStylePredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionStylePredictor : NSObject
@property (nonatomic, readonly, strong) FritzManagedModel * _Nonnull managedModel;
/// Initialize FritzStyleTransferModel with your own trained style model.
/// \param model Fritz model to use.
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
/// Initialize FritzVisionStylePredictor with your own trained style model.
/// \param model Fritz model to use.
///
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize FritzVisionStylePredictor with your own trained style model.
/// \param model Fritz model to use.
///
/// \param managedModel FritzManagedModel to use.
///
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Run Style Transfer on a FritzVisionImage.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request.
/// Contains a FritzVisionSegmentationResult or error message.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionStyleModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(CVPixelBufferRef _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11FritzVision29FritzVisionFlexibleStyleModel") SWIFT_AVAILABILITY(ios,introduced=12.0) SWIFT_DEPRECATED_MSG("", "FritzVisionStylePredictor")
@interface FritzVisionFlexibleStyleModel : FritzVisionStylePredictor
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end

@class ModelSegmentationClass;

/// Class labels for FritzVisionHairPredictor
SWIFT_CLASS_NAMED("FritzVisionHairClass")
@interface FritzVisionHairClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull hair;)
+ (ModelSegmentationClass * _Nonnull)hair SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class FritzVisionSegmentationModelOptions;
@class FritzVisionSegmentationResult;

SWIFT_CLASS_NAMED("FritzVisionSegmentationModel") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSegmentationModel : BasePredictor
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull classes;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
/// Run image segmentation on a FritzVisionImage.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request.  Contains a FritzVisionSegmentationResult or error message.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionSegmentationModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(FritzVisionSegmentationResult * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model SWIFT_UNAVAILABLE;
@end


/// Predictor that takes predicts pixels that are Hair
SWIFT_CLASS_NAMED("FritzVisionHairSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionHairSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end

@class FritzModelConfiguration;

SWIFT_CLASS_NAMED("FritzVisionHairSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionHairSegmentationModelAccurate : FritzVisionHairSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionHairSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionHairSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionHairSegmentationModelFast : FritzVisionHairSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionHairSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionHairSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionHairSegmentationModelSmall : FritzVisionHairSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionHairSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


@class AVCaptureConnection;

/// An image or image buffer used in vision detection.
SWIFT_CLASS_NAMED("FritzVisionImage") SWIFT_AVAILABILITY(watchos,introduced=4.0) SWIFT_AVAILABILITY(tvos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_AVAILABILITY(macos,introduced=10.13)
@interface FritzVisionImage : NSObject
/// Shared CIContext
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CIContext * _Nonnull sharedContext;)
+ (CIContext * _Nonnull)sharedContext SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBuffer:(CMSampleBufferRef _Nonnull)buffer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageBuffer:(CVPixelBufferRef _Nonnull)imageBuffer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCIImage:(CIImage * _Nonnull)ciImage;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image orientation:(CGImagePropertyOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageBuffer:(CVPixelBufferRef _Nonnull)imageBuffer orientation:(CGImagePropertyOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer connection:(AVCaptureConnection * _Nonnull)connection OBJC_DESIGNATED_INITIALIZER;
- (id _Nullable)debugQuickLookObject SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
/// Blends mask with current image.
/// Rotates source image to <code>up</code> orientation before blending.
/// \param mask Overlaying image
///
/// \param blendKernel Blend mode used to blend images.
///
/// \param samplingMethod Method used to sample images when resizing images.
///
/// \param opacity Opacity of mask [0.0 - 1.0] overlayed on source image.
///
///
/// returns:
/// Blended image
- (UIImage * _Nullable)blendWithMask:(UIImage * _Nonnull)mask blendMode:(CIBlendKernel * _Nonnull)blendKernel samplingMethod:(enum ResizeSamplingMethod)samplingMethod opacity:(CGFloat)opacity SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
/// Uses an alpha mask to cutout maked regions, specifying with area of mask to keep.
/// \param alphaMask Alpha Mask with a single class.
///
/// \param segmentationRegion Region of alpha mask to remove.
///
/// \param samplingMethod Resizing sampling method to use.
///
/// \param context Optional Core Image context to use.  Defaults to
/// <code>FritzVisionImage.sharedContext</code>
///
///
/// returns:
/// Masked image.
- (UIImage * _Nullable)maskWithImage:(UIImage * _Nonnull)alphaMask removingPixelsIn:(enum FritzSegmentationRegion)segmentationRegion samplingMethod:(enum ResizeSamplingMethod)samplingMethod context:(CIContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
- (CVPixelBufferRef _Nullable)rotate SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "rotated");
/// Returns image applying rotation from <code>metatadata</code>.
- (UIImage * _Nullable)rotated SWIFT_WARN_UNUSED_RESULT;
/// Returns image applying rotation from <code>metatadata</code>.
- (UIImage * _Nullable)resizedToSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
/// Dimensions of FritzVisionImage, after rotation
@property (nonatomic, readonly) CGSize size;
@end


SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
- (UIImage * _Nullable)toImage SWIFT_WARN_UNUSED_RESULT;
- (CVPixelBufferRef _Nullable)toPixelBuffer SWIFT_WARN_UNUSED_RESULT;
@end






SWIFT_CLASS_NAMED("FritzVisionImageMetadata") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImageMetadata : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Orientation defaults to <code>FritzImageOrientation.right</code> which should work for rear facing cameras with a device orientation of Portrait.
@property (nonatomic) enum FritzImageOrientation orientation;
@property (nonatomic, readonly) CGImagePropertyOrientation cgOrientation;
@end


/// Represents a label for an image.
SWIFT_CLASS_NAMED("FritzVisionLabel") SWIFT_AVAILABILITY(watchos,introduced=4.0) SWIFT_AVAILABILITY(tvos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_AVAILABILITY(macos,introduced=10.13)
@interface FritzVisionLabel : NSObject
/// Human readable string of detected label.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Prediction confidence for label in range of [0, 1]
@property (nonatomic, readonly) double confidence;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label confidence:(double)confidence OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FritzVisionLabelError, open) {
  FritzVisionLabelErrorNoVisionModel = 0,
};
static NSString * _Nonnull const FritzVisionLabelErrorDomain = @"FritzVision.FritzVisionLabelError";

@class FritzVisionLabelModelOptions;

SWIFT_CLASS("_TtC11FritzVision25FritzVisionLabelPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLabelPredictor : BasePredictor
/// Predict poses from a FritzImage.
/// \param input The image to use to dectect poses.
///
/// \param options The options used to configure the pose results.
///
/// \param completion Handler to call back on the main thread with poses or error.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionLabelModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<FritzVisionLabel *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionLabelModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLabelModelFast : FritzVisionLabelPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
+ (void)setModelConfig:(FritzModelConfiguration * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
/// Is WiFi required to download pose model over the air.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionLabelModelOptions")
@interface FritzVisionLabelModelOptions : NSObject
/// Confidence threshold for prediction results in the range of [0, 1], default is 0.6.
@property (nonatomic) double threshold;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
/// Number of results to return from request.
@property (nonatomic) NSInteger numResults;
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionLivingRoomClass")
@interface FritzVisionLivingRoomClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull chair;)
+ (ModelSegmentationClass * _Nonnull)chair SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull wall;)
+ (ModelSegmentationClass * _Nonnull)wall SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull coffeeTable;)
+ (ModelSegmentationClass * _Nonnull)coffeeTable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull ceiling;)
+ (ModelSegmentationClass * _Nonnull)ceiling SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull floor;)
+ (ModelSegmentationClass * _Nonnull)floor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bed;)
+ (ModelSegmentationClass * _Nonnull)bed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull lamp;)
+ (ModelSegmentationClass * _Nonnull)lamp SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sofa;)
+ (ModelSegmentationClass * _Nonnull)sofa SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull windowpane;)
+ (ModelSegmentationClass * _Nonnull)windowpane SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull pillow;)
+ (ModelSegmentationClass * _Nonnull)pillow SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLivingRoomSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes SWIFT_UNAVAILABLE;
@end


/// Image segmentation model to detect common living room objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLivingRoomSegmentationModelAccurate : FritzVisionLivingRoomSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionLivingRoomSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common living room objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLivingRoomSegmentationModelFast : FritzVisionLivingRoomSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionLivingRoomSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common living room objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionLivingRoomSegmentationModelSmall : FritzVisionLivingRoomSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionLivingRoomSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionObject") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionObject : NSObject
@property (nonatomic, readonly, strong) FritzVisionLabel * _Nonnull detectedLabel;
/// BoundingBox of detected object.
@property (nonatomic, readonly, strong) BoundingBox * _Nonnull boundingBox;
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
@property (nonatomic, readonly) double confidence;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithLabel:(FritzVisionLabel * _Nonnull)label boundingBox:(BoundingBox * _Nonnull)boundingBox OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FritzVisionObjectModelOptions;

SWIFT_CLASS_NAMED("FritzVisionObjectPredictor") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionObjectPredictor : BasePredictor
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
/// Initialize Object model using a custom model with accessible class names.
/// For models with built-in post processing and built-in class names.
/// Uses default class names as a fall back if none are found.
/// \param model IdentifiedModel to use
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
/// Initialize Object model using a custom model with the given class names.
/// For models with built-in post processing without built-in class names.
/// \param identifiedModel IdentifiedModel to use
///
/// \param classNames Labels for objects
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)identifiedModel processedLabels:(NSArray<NSString *> * _Nonnull)classNames OBJC_DESIGNATED_INITIALIZER;
/// Run prediction for vision object model.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request has finished processing.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionObjectModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<FritzVisionObject *> * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("FritzVisionObjectModelFast") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionObjectModelFast : FritzVisionObjectPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionObjectModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)identifiedModel processedLabels:(NSArray<NSString *> * _Nonnull)classNames OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionObjectModelOptions")
@interface FritzVisionObjectModelOptions : NSObject
/// Confidence threshold for prediction results in the range of [0, 1], default is 0.6.
@property (nonatomic) double threshold;
/// Threshold for overlap of items within a single class in range [0, 1].  Lower values are more strict.
@property (nonatomic) double iouThreshold;
/// Number of results to return from request.
@property (nonatomic) NSInteger numResults;
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic, readonly) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionOutdoorClass")
@interface FritzVisionOutdoorClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull building;)
+ (ModelSegmentationClass * _Nonnull)building SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sky;)
+ (ModelSegmentationClass * _Nonnull)sky SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull tree;)
+ (ModelSegmentationClass * _Nonnull)tree SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sidewalk;)
+ (ModelSegmentationClass * _Nonnull)sidewalk SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull ground;)
+ (ModelSegmentationClass * _Nonnull)ground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull car;)
+ (ModelSegmentationClass * _Nonnull)car SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull water;)
+ (ModelSegmentationClass * _Nonnull)water SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull house;)
+ (ModelSegmentationClass * _Nonnull)house SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull fence;)
+ (ModelSegmentationClass * _Nonnull)fence SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sign;)
+ (ModelSegmentationClass * _Nonnull)sign SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull skyscraper;)
+ (ModelSegmentationClass * _Nonnull)skyscraper SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bridge;)
+ (ModelSegmentationClass * _Nonnull)bridge SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull river;)
+ (ModelSegmentationClass * _Nonnull)river SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bus;)
+ (ModelSegmentationClass * _Nonnull)bus SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull truck;)
+ (ModelSegmentationClass * _Nonnull)truck SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull van;)
+ (ModelSegmentationClass * _Nonnull)van SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull motorbike;)
+ (ModelSegmentationClass * _Nonnull)motorbike SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bicycle;)
+ (ModelSegmentationClass * _Nonnull)bicycle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull trafficLight;)
+ (ModelSegmentationClass * _Nonnull)trafficLight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull person;)
+ (ModelSegmentationClass * _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionOutdoorSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionOutdoorSegmentationModelAccurate : FritzVisionOutdoorSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionOutdoorSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionOutdoorSegmentationModelFast : FritzVisionOutdoorSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionOutdoorSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionOutdoorSegmentationModelSmall : FritzVisionOutdoorSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionOutdoorSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



/// Class labels for FritzVisionPeopleAndPetSegmentationMediumModel
SWIFT_CLASS_NAMED("FritzVisionPeopleAndPetClass")
@interface FritzVisionPeopleAndPetSegmentationMediumClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull petOrPerson;)
+ (ModelSegmentationClass * _Nonnull)petOrPerson SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people and pets.
SWIFT_CLASS_NAMED("FritzVisionPeopleAndPetSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleAndPetSegmentationMediumModel : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people and pets.
SWIFT_CLASS_NAMED("FritzVisionPeopleAndPetSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleAndPetSegmentationModelAccurate : FritzVisionPeopleAndPetSegmentationMediumModel
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleAndPetSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



/// Class labels for FritzVisionPeoplePredictor
SWIFT_CLASS_NAMED("FritzVisionPeopleClass")
@interface FritzVisionPeopleClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull person;)
+ (ModelSegmentationClass * _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Predictor that takes predicts pixels that are people
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people.
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleSegmentationModelAccurate : FritzVisionPeopleSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people.
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleSegmentationModelFast : FritzVisionPeopleSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people.
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionPeopleSegmentationModelSmall : FritzVisionPeopleSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionPetClass")
@interface FritzVisionPetClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull pet;)
+ (ModelSegmentationClass * _Nonnull)pet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPetSegmentationPredictor : FritzVisionSegmentationModel
/// Build Pet Segmentation Model with provided model.
/// \param model Model to use
///
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
/// Build Pet Segmentation Model with provided model.
/// \param model Model to use
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPetSegmentationModelAccurate : FritzVisionPetSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPetSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPetSegmentationModelFast : FritzVisionPetSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPetSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionPetSegmentationModelSmall : FritzVisionPetSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPetSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



/// Model used to create a 3D pose from 2D pose
SWIFT_CLASS("_TtC11FritzVision27FritzVisionPoseLiftingModel") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPoseLiftingModel : BasePredictor
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end






/// Options for Pose Model.
SWIFT_CLASS_NAMED("FritzVisionPoseModelOptions")
@interface FritzVisionPoseModelOptions : NSObject
/// Crop and scale option. Default value is scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
/// Minimum score a part must have to potentially build a new pose. The pose will include parts below this
/// threshold, but a part below this threshold will not trigger a new pose instance to be built.
@property (nonatomic) double minPartThreshold;
/// Minimum score a pose must have to be included in results.
@property (nonatomic) double minPoseThreshold;
/// NMS radius for pose
@property (nonatomic) NSInteger nmsRadius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11FritzVision34FritzVisionSegmentationMaskOptions") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSegmentationMaskOptions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionSegmentationModelOptions")
@interface FritzVisionSegmentationModelOptions : NSObject
/// Crop and scale option. Default value is scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MLMultiArray;

SWIFT_CLASS_NAMED("FritzVisionSegmentationResult") SWIFT_AVAILABILITY(watchos,introduced=4.0) SWIFT_AVAILABILITY(tvos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_AVAILABILITY(macos,introduced=10.13)
@interface FritzVisionSegmentationResult : NSObject
/// Height of model output array.
@property (nonatomic, readonly) NSInteger height;
/// Width of model output array.
@property (nonatomic, readonly) NSInteger width;
/// Model classes.
@property (nonatomic, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull classes;
/// Raw MLMultiArray result from prediction.
@property (nonatomic, readonly, strong) MLMultiArray * _Nonnull predictionResult;
- (NSArray<NSNumber *> * _Nonnull)getArrayOfConfidenceScoresforClass:(ModelSegmentationClass * _Nonnull)segmentClass ClippingAbove:(double)threshold zeroingBelow:(double)minThreshold SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSegmentationResult (SWIFT_EXTENSION(FritzVision))
/// Generate UIImage mask from most likely class at each pixel.
/// The generated image size will fit the original image passed into prediction, applying rotation.
/// If the image was center cropped, will return an image that covers the cropped image.
/// \param minScore Minimum threshold value needed to count. By default zero.
/// You can set this property to filter out classes that may be the most likely but still
/// have a lower probability.
///
/// \param maxAlpha Alpha value of the color (0-255) for detected classes. By default completely opaque.
///
/// \param resize If true (default) mask will be scaled to the size of the input image.
///
/// \param blurRadius The radius to blur the edges of the mask.
///
///
/// returns:
/// Image
- (UIImage * _Nullable)buildMultiClassMaskWithMinAcceptedScore:(double)minScore maxAlpha:(uint8_t)maxAlpha resize:(BOOL)resize blurRadius:(CGFloat)blurRadius SWIFT_WARN_UNUSED_RESULT;
/// Generate UIImage mask for given class.
/// The generated image size will fit the original image passed into prediction, applying rotation.
/// If the image was center cropped, will return an image that covers the cropped image.
/// \param segmentClass Class for the mask.
///
/// \param clippingThreshold All confidence scores above this value will be clipped to 1.
/// Range [0.0-1.0].
///
/// \param zeroingThreshold All confidence scores below this value will be set to 0.
/// Range [0.0-1.0].
///
/// \param maxAlpha Maximum alpha value of mask. Confidence scores will be multiplied by this value
/// after clipping and zeroing.
///
/// \param resize If true, resizes mask to input image size.
///
/// \param color The color of mask.
///
/// \param blurRadius The radius to blur the edges of the mask.
///
///
/// returns:
/// Mask for class.
- (UIImage * _Nullable)buildSingleClassMask:(ModelSegmentationClass * _Nonnull)segmentClass clippingScoresAbove:(double)clippingThreshold zeroingScoresBelow:(double)zeroingThreshold maxAlpha:(uint8_t)maxAlpha resize:(BOOL)resize color:(UIColor * _Nullable)color blurRadius:(CGFloat)blurRadius SWIFT_WARN_UNUSED_RESULT;
/// Generate UIImage mask for given class.
/// The generated image size will fit the original image passed into prediction, applying rotation.
/// If the image was center cropped, will return an image that covers the cropped image.
/// \param segmentClass Class for the mask.
///
/// \param options Options for the mask.
///
/// \param resize If true, resizes mask to input image size.
///
///
/// returns:
/// Mask for class.
- (UIImage * _Nullable)buildSingleClassMask:(ModelSegmentationClass * _Nonnull)segmentClass options:(FritzVisionSegmentationMaskOptions * _Nonnull)options resize:(BOOL)resize SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("FritzVisionSkyClass")
@interface FritzVisionSkyClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sky;)
+ (ModelSegmentationClass * _Nonnull)sky SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect the sky.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSkySegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect the sky.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSkySegmentationModelAccurate : FritzVisionSkySegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionSkySegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSkySegmentationModelFast : FritzVisionSkySegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionSkySegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect the sky.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionSkySegmentationModelSmall : FritzVisionSkySegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionSkySegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11FritzVision21FritzVisionStyleModel") SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_DEPRECATED_MSG("", "FritzVisionStylePredictor")
@interface FritzVisionStyleModel : FritzVisionStylePredictor
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Options for running style transfer models.
SWIFT_CLASS_NAMED("FritzVisionStyleModelOptions")
@interface FritzVisionStyleModelOptions : NSObject
/// Crop and scale option. Default option is .scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model).
/// In iOS 12, scaleFit would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// If you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
/// Resize the output to match the FritzVisionImage size.
@property (nonatomic) BOOL resizeOutputToInputDimensions;
/// Sets dimensions of input image for flexible model. Note that setting this to higher resolutions will increase
/// model processing time.
@property (nonatomic, strong) FlexibleModelDimensions * _Nonnull flexibleModelDimensions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionStylePredictor (SWIFT_EXTENSION(FritzVision))
/// Fetch and load Style Models for the given tags.
/// Note that this instantiates all models which could cause memory pressure if you are loading many models.
/// If you do not want to immediately instantiate the models, create a ModelTagManager and manage loading yourself.
/// \param tags List of tags to load models for.
///
/// \param wifiRequiredForModelDownload If true, client must be connected to a wifi network to download a model. Default is false.
///
/// \param completionHandler Completion handler with instantiated FritzVisionStylePredictors
///
+ (void)fetchStyleModelsForTags:(NSArray<NSString *> * _Nonnull)tags wifiRequiredForModelDownload:(BOOL)wifiRequiredForModelDownload withCompletionHandler:(void (^ _Nonnull)(NSArray<FritzVisionStylePredictor *> * _Nullable, NSError * _Nullable))completionHandler;
@end






SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionStylePredictor (SWIFT_EXTENSION(FritzVision))
/// Model metadata set in webapp.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Model tags set in webapp.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, FritzHumanSkeleton, "HumanSkeleton", open) {
  FritzHumanSkeletonNose = 0,
  FritzHumanSkeletonLeftEye = 1,
  FritzHumanSkeletonRightEye = 2,
  FritzHumanSkeletonLeftEar = 3,
  FritzHumanSkeletonRightEar = 4,
  FritzHumanSkeletonLeftShoulder = 5,
  FritzHumanSkeletonRightShoulder = 6,
  FritzHumanSkeletonLeftElbow = 7,
  FritzHumanSkeletonRightElbow = 8,
  FritzHumanSkeletonLeftWrist = 9,
  FritzHumanSkeletonRightWrist = 10,
  FritzHumanSkeletonLeftHip = 11,
  FritzHumanSkeletonRightHip = 12,
  FritzHumanSkeletonLeftKnee = 13,
  FritzHumanSkeletonRightKnee = 14,
  FritzHumanSkeletonLeftAnkle = 15,
  FritzHumanSkeletonRightAnkle = 16,
};




SWIFT_CLASS_NAMED("ModelSegmentationClass")
@interface ModelSegmentationClass : NSObject
/// Index in output array from model.
@property (nonatomic, readonly) NSInteger index;
/// Label name for Model Segmentation Class.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11FritzVision7Point3D")
@interface Point3D : NSObject
@property (nonatomic, readonly) CGFloat x;
@property (nonatomic, readonly) CGFloat y;
@property (nonatomic, readonly) CGFloat z;
- (nonnull instancetype)initWithX:(CGFloat)x y:(CGFloat)y z:(CGFloat)z OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (NSArray<NSNumber *> * _Nonnull)toArray SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Point3D (SWIFT_EXTENSION(FritzVision))
- (nonnull instancetype)initWith:(NSArray<NSNumber *> * _Nonnull)array;
@end






/// Options for Pose Model.
SWIFT_CLASS("_TtC11FritzVision27PoseLiftingPredictorOptions")
@interface PoseLiftingPredictorOptions : NSObject
/// Default Pose model options.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PoseLiftingPredictorOptions * _Nonnull defaults;)
+ (PoseLiftingPredictorOptions * _Nonnull)defaults SWIFT_WARN_UNUSED_RESULT;
/// If true only uses CPU to run predictions.
@property (nonatomic) BOOL useCPUOnly;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, FritzSegmentationRegion, "SegmentationRegion", open) {
/// Foreground is the region of the image where the alpha value of a mask is greater than 0.
  FritzSegmentationRegionForeground = 0,
/// Background is the region of the image where the alpha value of a mask is 0.
  FritzSegmentationRegionBackground = 1,
};


SWIFT_CLASS_NAMED("StyleOutputDimensions") SWIFT_DEPRECATED_MSG("", "FlexibleModelDimensions")
@interface StyleOutputDimensions : FlexibleModelDimensions
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithWidth:(NSInteger)width withHeight:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
@end















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreML;
@import CoreMedia;
@import CoreVideo;
@import ImageIO;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FritzVision",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif









@class FritzManagedModel;
@class FritzMLModel;
@protocol FritzSwiftIdentifiedModel;

SWIFT_CLASS("_TtC11FritzVision13BasePredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface BasePredictor : NSObject
@property (nonatomic, readonly, strong) FritzManagedModel * _Nonnull managedModel;
/// Initialize model with FritzMLModel
/// \param model FritzMLModel
///
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
/// Initialize model with FritzMLModel
/// \param model FritzMLModel
///
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
/// Model metadata set in webapp.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Model tags set in webapp.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// BoundingBox Contains coordinates to draw bounding boxes on images as predicted directly by the model.  However, because of cropping or resizing done to accomadate model size constraints, the default values may not map to coordinates in your view.  Use the toCGRect functions to convert bounding box coordinates to fit the image.
SWIFT_CLASS_NAMED("BoundingBox")
@interface BoundingBox : NSObject
- (nonnull instancetype)initWithYMin:(double)yMin xMin:(double)xMin yMax:(double)yMax xMax:(double)xMax OBJC_DESIGNATED_INITIALIZER;
- (CGRect)imgHeight:(double)imgHeight imgWidth:(double)imgWidth SWIFT_WARN_UNUSED_RESULT;
- (CGRect)imgHeight:(double)imgHeight imgWidth:(double)imgWidth xOffset:(double)xOffset yOffset:(double)yOffset SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CALayer;
@class UIColor;

SWIFT_CLASS_NAMED("BoundingBoxOutline")
@interface BoundingBoxOutline : NSObject
/// Add shape and text to parent layer
/// \param parent parent CALayer
///
- (void)parent:(CALayer * _Nonnull)parent;
/// Show Bounding box.
/// \param frame CGRect of coordinates to draw box
///
/// \param label Classified label
///
/// \param color Color of bounding box outline
///
/// \param textColor Classified label text
///
- (void)frame:(CGRect)frame label:(NSString * _Nonnull)label color:(UIColor * _Nonnull)color textColor:(UIColor * _Nonnull)textColor;
/// Hide bounding box from appearing in view.
- (void)hide;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CIContext;
@class CIImage;
enum ResizeSamplingMethod : NSInteger;

SWIFT_CLASS("_TtC11FritzVision15CIImagePipeline") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline : NSObject
/// Image context used to render CIImage pipeline
@property (nonatomic, readonly, strong) CIContext * _Nonnull context;
/// Current CIImage.
@property (nonatomic, strong) CIImage * _Nonnull image;
/// Sampling method use when resizing images.  Defaults to <code>.affine</code>, which is the fastest but produces the most artifacts.
@property (nonatomic) enum ResizeSamplingMethod resizeSamplingMethod;
/// Create <code>CIImagePipeline</code>
/// \param image Input CIImage
///
/// \param context CIImage context. If not provided, uses FritzVisionImage shared context.
///
- (nonnull instancetype)init:(CIImage * _Nonnull)image context:(CIContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
/// Render current CIImage to pixelBuffer
- (CVPixelBufferRef _Nullable)render SWIFT_WARN_UNUSED_RESULT;
- (CVPixelBufferRef _Nullable)emptyPixelBuffer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Sampling method used to resize image.
typedef SWIFT_ENUM_NAMED(NSInteger, ResizeSamplingMethod, "ResizeSamplingMethod", open) {
/// Lanczos Sampling method
  ResizeSamplingMethodLanczos = 0,
/// Bicubic Sampling method.
  ResizeSamplingMethodBicubic = 1,
/// Affine transformation resampling. This is the fastest method but results in more edge artifacts.
  ResizeSamplingMethodAffine = 2,
};

@class UIImage;
enum FritzSegmentationRegion : NSInteger;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline (SWIFT_EXTENSION(FritzVision))
/// Mask image using a single class alpha RGBA mask.
/// \param alphaMask RGBA alpha mask
///
/// \param segmentationRegion Region of image to remove.  <code>background</code> removes all areas
/// where alpha value of mask is 0.
///
- (void)maskWith:(UIImage * _Nonnull)alphaMask removing:(enum FritzSegmentationRegion)segmentationRegion;
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline (SWIFT_EXTENSION(FritzVision))
- (void)maskWith:(AVDepthData * _Nonnull)depthData focusingAtDepth:(CGFloat)depth focalWidth:(CGFloat)focalWidth;
- (void)maskWith:(AVDepthData * _Nonnull)depthData pixelsFartherThan:(CGFloat)depth;
- (void)maskWith:(AVDepthData * _Nonnull)depthData pixelsCloserThan:(CGFloat)depth;
- (void)blurWith:(AVDepthData * _Nonnull)depthData focusedAt:(CGFloat)depth focalWidth:(CGFloat)focalWidth blurRadius:(CGFloat)blurRadius;
- (void)blurWithPixelsFartherThan:(CGFloat)depth using:(AVDepthData * _Nonnull)depthData blurRadius:(CGFloat)blurRadius;
- (void)blurWithPixelsCloserThan:(CGFloat)depth using:(AVDepthData * _Nonnull)depthData blurRadius:(CGFloat)blurRadius;
@end

@class CIBlendKernel;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline (SWIFT_EXTENSION(FritzVision))
/// Center Crop Image
- (void)centerCrop;
/// Orients image from given orientation to up orientation.
/// \param orientation Orientation
///
- (void)orient:(CGImagePropertyOrientation)orientation;
/// Blends image with provided mask.
/// \param mask Alpha matting mask to blend image with
///
/// \param kernel Blend kernel used to blend mask with background image.
///
/// \param opacity Opacity of mask [0.0 - 1.0] overlayed on source image.
///
- (void)blendWith:(UIImage * _Nonnull)mask blendKernel:(CIBlendKernel * _Nonnull)kernel opacity:(CGFloat)opacity;
- (CIImage * _Nullable)changeOpacityOn:(CIImage * _Nonnull)image to:(CGFloat)opacity SWIFT_WARN_UNUSED_RESULT;
/// Blurs image.
/// \param blurRadius Pixel radius of the blur kernel
///
- (void)blurWithBlurRadius:(CGFloat)blurRadius;
@end


SWIFT_CLASS_NAMED("FlexibleModelDimensions")
@interface FlexibleModelDimensions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithWidth:(NSInteger)width withHeight:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
@end


@interface FlexibleModelDimensions (SWIFT_EXTENSION(FritzVision))
/// Use original image dimensions.  Model will throw an error if image dimensions are not within range of acceptable input sizes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull original;)
+ (FlexibleModelDimensions * _Nonnull)original SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull lowResolution;)
+ (FlexibleModelDimensions * _Nonnull)lowResolution SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull mediumResolution;)
+ (FlexibleModelDimensions * _Nonnull)mediumResolution SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull highResolution;)
+ (FlexibleModelDimensions * _Nonnull)highResolution SWIFT_WARN_UNUSED_RESULT;
@end

/// Describes the orientation of the image. The orientations match the <a href="https://developer.apple.com/documentation/imageio/cgimagepropertyorientation">CGImagePropertyOrientation</a> Enumeration from Apple. Refer to that documentation for clear descriptions of each case.
typedef SWIFT_ENUM(int32_t, FritzImageOrientation, open) {
  FritzImageOrientationUp = 1,
  FritzImageOrientationUpMirrored = 2,
  FritzImageOrientationDown = 3,
  FritzImageOrientationDownMirrored = 4,
  FritzImageOrientationLeftMirrored = 5,
  FritzImageOrientationRight = 6,
  FritzImageOrientationRightMirrored = 7,
  FritzImageOrientationLeft = 8,
};

@class NSCoder;

SWIFT_CLASS("_TtC11FritzVision14FritzVideoView") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVideoView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Initialize as an empty view.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



typedef SWIFT_ENUM_NAMED(NSInteger, FritzVisionCropAndScale, "FritzVisionCropAndScale", open) {
  FritzVisionCropAndScaleCenterCrop = 1,
  FritzVisionCropAndScaleScaleFill = 2,
  FritzVisionCropAndScaleScaleFit = 3,
};

@class FritzVisionImage;
@class FritzVisionDepthModelOptions;

SWIFT_CLASS_NAMED("FritzVisionDepthModel") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionDepthModel : BasePredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Run image segmentation on a FritzVisionDepthMap.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request.
/// Contains a FritzVisionDepthMap or error message.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionDepthModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(AVDepthData * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS_NAMED("FritzVisionDepthModelOptions")
@interface FritzVisionDepthModelOptions : NSObject
/// Crop and scale option. Default value is scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, FritzVisionError, open) {
  FritzVisionErrorInvalidImageBuffer = 0,
  FritzVisionErrorErrorProcessingImage = 1,
  FritzVisionErrorImageNotEncodable = 2,
};
static NSString * _Nonnull const FritzVisionErrorDomain = @"FritzVision.FritzVisionError";

@class FritzVisionStyleModelOptions;

/// Construct a Flexible Style Transfer model and run on any FritzVisionImage.
/// Produces stylized images with customizable output sizes.
SWIFT_CLASS_NAMED("FritzVisionStylePredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionStylePredictor : NSObject
@property (nonatomic, readonly, strong) FritzManagedModel * _Nonnull managedModel;
/// Initialize FritzStyleTransferModel with your own trained style model.
/// \param model Fritz model to use.
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
/// Initialize FritzVisionStylePredictor with your own trained style model.
/// \param model Fritz model to use.
///
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize FritzVisionStylePredictor with your own trained style model.
/// \param model Fritz model to use.
///
/// \param managedModel FritzManagedModel to use.
///
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Run Style Transfer on a FritzVisionImage.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request.
/// Contains a FritzVisionSegmentationResult or error message.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionStyleModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(CVPixelBufferRef _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11FritzVision29FritzVisionFlexibleStyleModel") SWIFT_AVAILABILITY(ios,introduced=12.0) SWIFT_DEPRECATED_MSG("", "FritzVisionStylePredictor")
@interface FritzVisionFlexibleStyleModel : FritzVisionStylePredictor
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end

@class ModelSegmentationClass;

/// Class labels for FritzVisionHairPredictor
SWIFT_CLASS_NAMED("FritzVisionHairClass")
@interface FritzVisionHairClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull hair;)
+ (ModelSegmentationClass * _Nonnull)hair SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class FritzVisionSegmentationModelOptions;
@class FritzVisionSegmentationResult;

SWIFT_CLASS_NAMED("FritzVisionSegmentationModel") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSegmentationModel : BasePredictor
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull classes;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
/// Run image segmentation on a FritzVisionImage.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request.  Contains a FritzVisionSegmentationResult or error message.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionSegmentationModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(FritzVisionSegmentationResult * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model SWIFT_UNAVAILABLE;
@end


/// Predictor that takes predicts pixels that are Hair
SWIFT_CLASS_NAMED("FritzVisionHairSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionHairSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end

@class FritzModelConfiguration;

SWIFT_CLASS_NAMED("FritzVisionHairSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionHairSegmentationModelAccurate : FritzVisionHairSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionHairSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionHairSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionHairSegmentationModelFast : FritzVisionHairSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionHairSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionHairSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionHairSegmentationModelSmall : FritzVisionHairSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionHairSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


@class AVCaptureConnection;

/// An image or image buffer used in vision detection.
SWIFT_CLASS_NAMED("FritzVisionImage") SWIFT_AVAILABILITY(watchos,introduced=4.0) SWIFT_AVAILABILITY(tvos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_AVAILABILITY(macos,introduced=10.13)
@interface FritzVisionImage : NSObject
/// Shared CIContext
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CIContext * _Nonnull sharedContext;)
+ (CIContext * _Nonnull)sharedContext SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBuffer:(CMSampleBufferRef _Nonnull)buffer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageBuffer:(CVPixelBufferRef _Nonnull)imageBuffer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCIImage:(CIImage * _Nonnull)ciImage;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image orientation:(CGImagePropertyOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageBuffer:(CVPixelBufferRef _Nonnull)imageBuffer orientation:(CGImagePropertyOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer connection:(AVCaptureConnection * _Nonnull)connection OBJC_DESIGNATED_INITIALIZER;
- (id _Nullable)debugQuickLookObject SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
/// Blends mask with current image.
/// Rotates source image to <code>up</code> orientation before blending.
/// \param mask Overlaying image
///
/// \param blendKernel Blend mode used to blend images.
///
/// \param samplingMethod Method used to sample images when resizing images.
///
/// \param opacity Opacity of mask [0.0 - 1.0] overlayed on source image.
///
///
/// returns:
/// Blended image
- (UIImage * _Nullable)blendWithMask:(UIImage * _Nonnull)mask blendMode:(CIBlendKernel * _Nonnull)blendKernel samplingMethod:(enum ResizeSamplingMethod)samplingMethod opacity:(CGFloat)opacity SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
/// Uses an alpha mask to cutout maked regions, specifying with area of mask to keep.
/// \param alphaMask Alpha Mask with a single class.
///
/// \param segmentationRegion Region of alpha mask to remove.
///
/// \param samplingMethod Resizing sampling method to use.
///
/// \param context Optional Core Image context to use.  Defaults to
/// <code>FritzVisionImage.sharedContext</code>
///
///
/// returns:
/// Masked image.
- (UIImage * _Nullable)maskWithImage:(UIImage * _Nonnull)alphaMask removingPixelsIn:(enum FritzSegmentationRegion)segmentationRegion samplingMethod:(enum ResizeSamplingMethod)samplingMethod context:(CIContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
- (CVPixelBufferRef _Nullable)rotate SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "rotated");
/// Returns image applying rotation from <code>metatadata</code>.
- (UIImage * _Nullable)rotated SWIFT_WARN_UNUSED_RESULT;
/// Returns image applying rotation from <code>metatadata</code>.
- (UIImage * _Nullable)resizedToSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
/// Dimensions of FritzVisionImage, after rotation
@property (nonatomic, readonly) CGSize size;
@end


SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
- (UIImage * _Nullable)toImage SWIFT_WARN_UNUSED_RESULT;
- (CVPixelBufferRef _Nullable)toPixelBuffer SWIFT_WARN_UNUSED_RESULT;
@end






SWIFT_CLASS_NAMED("FritzVisionImageMetadata") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImageMetadata : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Orientation defaults to <code>FritzImageOrientation.right</code> which should work for rear facing cameras with a device orientation of Portrait.
@property (nonatomic) enum FritzImageOrientation orientation;
@property (nonatomic, readonly) CGImagePropertyOrientation cgOrientation;
@end


/// Represents a label for an image.
SWIFT_CLASS_NAMED("FritzVisionLabel") SWIFT_AVAILABILITY(watchos,introduced=4.0) SWIFT_AVAILABILITY(tvos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_AVAILABILITY(macos,introduced=10.13)
@interface FritzVisionLabel : NSObject
/// Human readable string of detected label.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Prediction confidence for label in range of [0, 1]
@property (nonatomic, readonly) double confidence;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label confidence:(double)confidence OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FritzVisionLabelError, open) {
  FritzVisionLabelErrorNoVisionModel = 0,
};
static NSString * _Nonnull const FritzVisionLabelErrorDomain = @"FritzVision.FritzVisionLabelError";

@class FritzVisionLabelModelOptions;

SWIFT_CLASS("_TtC11FritzVision25FritzVisionLabelPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLabelPredictor : BasePredictor
/// Predict poses from a FritzImage.
/// \param input The image to use to dectect poses.
///
/// \param options The options used to configure the pose results.
///
/// \param completion Handler to call back on the main thread with poses or error.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionLabelModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<FritzVisionLabel *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionLabelModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLabelModelFast : FritzVisionLabelPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
+ (void)setModelConfig:(FritzModelConfiguration * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
/// Is WiFi required to download pose model over the air.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionLabelModelOptions")
@interface FritzVisionLabelModelOptions : NSObject
/// Confidence threshold for prediction results in the range of [0, 1], default is 0.6.
@property (nonatomic) double threshold;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
/// Number of results to return from request.
@property (nonatomic) NSInteger numResults;
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionLivingRoomClass")
@interface FritzVisionLivingRoomClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull chair;)
+ (ModelSegmentationClass * _Nonnull)chair SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull wall;)
+ (ModelSegmentationClass * _Nonnull)wall SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull coffeeTable;)
+ (ModelSegmentationClass * _Nonnull)coffeeTable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull ceiling;)
+ (ModelSegmentationClass * _Nonnull)ceiling SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull floor;)
+ (ModelSegmentationClass * _Nonnull)floor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bed;)
+ (ModelSegmentationClass * _Nonnull)bed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull lamp;)
+ (ModelSegmentationClass * _Nonnull)lamp SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sofa;)
+ (ModelSegmentationClass * _Nonnull)sofa SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull windowpane;)
+ (ModelSegmentationClass * _Nonnull)windowpane SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull pillow;)
+ (ModelSegmentationClass * _Nonnull)pillow SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLivingRoomSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes SWIFT_UNAVAILABLE;
@end


/// Image segmentation model to detect common living room objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLivingRoomSegmentationModelAccurate : FritzVisionLivingRoomSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionLivingRoomSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common living room objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLivingRoomSegmentationModelFast : FritzVisionLivingRoomSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionLivingRoomSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common living room objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionLivingRoomSegmentationModelSmall : FritzVisionLivingRoomSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionLivingRoomSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionObject") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionObject : NSObject
@property (nonatomic, readonly, strong) FritzVisionLabel * _Nonnull detectedLabel;
/// BoundingBox of detected object.
@property (nonatomic, readonly, strong) BoundingBox * _Nonnull boundingBox;
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
@property (nonatomic, readonly) double confidence;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithLabel:(FritzVisionLabel * _Nonnull)label boundingBox:(BoundingBox * _Nonnull)boundingBox OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FritzVisionObjectModelOptions;

SWIFT_CLASS_NAMED("FritzVisionObjectPredictor") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionObjectPredictor : BasePredictor
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
/// Initialize Object model using a custom model with accessible class names.
/// For models with built-in post processing and built-in class names.
/// Uses default class names as a fall back if none are found.
/// \param model IdentifiedModel to use
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
/// Initialize Object model using a custom model with the given class names.
/// For models with built-in post processing without built-in class names.
/// \param identifiedModel IdentifiedModel to use
///
/// \param classNames Labels for objects
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)identifiedModel processedLabels:(NSArray<NSString *> * _Nonnull)classNames OBJC_DESIGNATED_INITIALIZER;
/// Run prediction for vision object model.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request has finished processing.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionObjectModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<FritzVisionObject *> * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("FritzVisionObjectModelFast") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionObjectModelFast : FritzVisionObjectPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionObjectModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)identifiedModel processedLabels:(NSArray<NSString *> * _Nonnull)classNames OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionObjectModelOptions")
@interface FritzVisionObjectModelOptions : NSObject
/// Confidence threshold for prediction results in the range of [0, 1], default is 0.6.
@property (nonatomic) double threshold;
/// Threshold for overlap of items within a single class in range [0, 1].  Lower values are more strict.
@property (nonatomic) double iouThreshold;
/// Number of results to return from request.
@property (nonatomic) NSInteger numResults;
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic, readonly) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionOutdoorClass")
@interface FritzVisionOutdoorClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull building;)
+ (ModelSegmentationClass * _Nonnull)building SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sky;)
+ (ModelSegmentationClass * _Nonnull)sky SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull tree;)
+ (ModelSegmentationClass * _Nonnull)tree SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sidewalk;)
+ (ModelSegmentationClass * _Nonnull)sidewalk SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull ground;)
+ (ModelSegmentationClass * _Nonnull)ground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull car;)
+ (ModelSegmentationClass * _Nonnull)car SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull water;)
+ (ModelSegmentationClass * _Nonnull)water SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull house;)
+ (ModelSegmentationClass * _Nonnull)house SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull fence;)
+ (ModelSegmentationClass * _Nonnull)fence SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sign;)
+ (ModelSegmentationClass * _Nonnull)sign SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull skyscraper;)
+ (ModelSegmentationClass * _Nonnull)skyscraper SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bridge;)
+ (ModelSegmentationClass * _Nonnull)bridge SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull river;)
+ (ModelSegmentationClass * _Nonnull)river SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bus;)
+ (ModelSegmentationClass * _Nonnull)bus SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull truck;)
+ (ModelSegmentationClass * _Nonnull)truck SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull van;)
+ (ModelSegmentationClass * _Nonnull)van SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull motorbike;)
+ (ModelSegmentationClass * _Nonnull)motorbike SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bicycle;)
+ (ModelSegmentationClass * _Nonnull)bicycle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull trafficLight;)
+ (ModelSegmentationClass * _Nonnull)trafficLight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull person;)
+ (ModelSegmentationClass * _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionOutdoorSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionOutdoorSegmentationModelAccurate : FritzVisionOutdoorSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionOutdoorSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionOutdoorSegmentationModelFast : FritzVisionOutdoorSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionOutdoorSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionOutdoorSegmentationModelSmall : FritzVisionOutdoorSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionOutdoorSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



/// Class labels for FritzVisionPeopleAndPetSegmentationMediumModel
SWIFT_CLASS_NAMED("FritzVisionPeopleAndPetClass")
@interface FritzVisionPeopleAndPetSegmentationMediumClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull petOrPerson;)
+ (ModelSegmentationClass * _Nonnull)petOrPerson SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people and pets.
SWIFT_CLASS_NAMED("FritzVisionPeopleAndPetSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleAndPetSegmentationMediumModel : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people and pets.
SWIFT_CLASS_NAMED("FritzVisionPeopleAndPetSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleAndPetSegmentationModelAccurate : FritzVisionPeopleAndPetSegmentationMediumModel
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleAndPetSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



/// Class labels for FritzVisionPeoplePredictor
SWIFT_CLASS_NAMED("FritzVisionPeopleClass")
@interface FritzVisionPeopleClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull person;)
+ (ModelSegmentationClass * _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Predictor that takes predicts pixels that are people
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people.
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleSegmentationModelAccurate : FritzVisionPeopleSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people.
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleSegmentationModelFast : FritzVisionPeopleSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people.
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionPeopleSegmentationModelSmall : FritzVisionPeopleSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionPetClass")
@interface FritzVisionPetClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull pet;)
+ (ModelSegmentationClass * _Nonnull)pet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPetSegmentationPredictor : FritzVisionSegmentationModel
/// Build Pet Segmentation Model with provided model.
/// \param model Model to use
///
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
/// Build Pet Segmentation Model with provided model.
/// \param model Model to use
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPetSegmentationModelAccurate : FritzVisionPetSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPetSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPetSegmentationModelFast : FritzVisionPetSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPetSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionPetSegmentationModelSmall : FritzVisionPetSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPetSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



/// Model used to create a 3D pose from 2D pose
SWIFT_CLASS("_TtC11FritzVision27FritzVisionPoseLiftingModel") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPoseLiftingModel : BasePredictor
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end






/// Options for Pose Model.
SWIFT_CLASS_NAMED("FritzVisionPoseModelOptions")
@interface FritzVisionPoseModelOptions : NSObject
/// Crop and scale option. Default value is scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
/// Minimum score a part must have to potentially build a new pose. The pose will include parts below this
/// threshold, but a part below this threshold will not trigger a new pose instance to be built.
@property (nonatomic) double minPartThreshold;
/// Minimum score a pose must have to be included in results.
@property (nonatomic) double minPoseThreshold;
/// NMS radius for pose
@property (nonatomic) NSInteger nmsRadius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11FritzVision34FritzVisionSegmentationMaskOptions") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSegmentationMaskOptions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionSegmentationModelOptions")
@interface FritzVisionSegmentationModelOptions : NSObject
/// Crop and scale option. Default value is scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MLMultiArray;

SWIFT_CLASS_NAMED("FritzVisionSegmentationResult") SWIFT_AVAILABILITY(watchos,introduced=4.0) SWIFT_AVAILABILITY(tvos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_AVAILABILITY(macos,introduced=10.13)
@interface FritzVisionSegmentationResult : NSObject
/// Height of model output array.
@property (nonatomic, readonly) NSInteger height;
/// Width of model output array.
@property (nonatomic, readonly) NSInteger width;
/// Model classes.
@property (nonatomic, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull classes;
/// Raw MLMultiArray result from prediction.
@property (nonatomic, readonly, strong) MLMultiArray * _Nonnull predictionResult;
- (NSArray<NSNumber *> * _Nonnull)getArrayOfConfidenceScoresforClass:(ModelSegmentationClass * _Nonnull)segmentClass ClippingAbove:(double)threshold zeroingBelow:(double)minThreshold SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSegmentationResult (SWIFT_EXTENSION(FritzVision))
/// Generate UIImage mask from most likely class at each pixel.
/// The generated image size will fit the original image passed into prediction, applying rotation.
/// If the image was center cropped, will return an image that covers the cropped image.
/// \param minScore Minimum threshold value needed to count. By default zero.
/// You can set this property to filter out classes that may be the most likely but still
/// have a lower probability.
///
/// \param maxAlpha Alpha value of the color (0-255) for detected classes. By default completely opaque.
///
/// \param resize If true (default) mask will be scaled to the size of the input image.
///
/// \param blurRadius The radius to blur the edges of the mask.
///
///
/// returns:
/// Image
- (UIImage * _Nullable)buildMultiClassMaskWithMinAcceptedScore:(double)minScore maxAlpha:(uint8_t)maxAlpha resize:(BOOL)resize blurRadius:(CGFloat)blurRadius SWIFT_WARN_UNUSED_RESULT;
/// Generate UIImage mask for given class.
/// The generated image size will fit the original image passed into prediction, applying rotation.
/// If the image was center cropped, will return an image that covers the cropped image.
/// \param segmentClass Class for the mask.
///
/// \param clippingThreshold All confidence scores above this value will be clipped to 1.
/// Range [0.0-1.0].
///
/// \param zeroingThreshold All confidence scores below this value will be set to 0.
/// Range [0.0-1.0].
///
/// \param maxAlpha Maximum alpha value of mask. Confidence scores will be multiplied by this value
/// after clipping and zeroing.
///
/// \param resize If true, resizes mask to input image size.
///
/// \param color The color of mask.
///
/// \param blurRadius The radius to blur the edges of the mask.
///
///
/// returns:
/// Mask for class.
- (UIImage * _Nullable)buildSingleClassMask:(ModelSegmentationClass * _Nonnull)segmentClass clippingScoresAbove:(double)clippingThreshold zeroingScoresBelow:(double)zeroingThreshold maxAlpha:(uint8_t)maxAlpha resize:(BOOL)resize color:(UIColor * _Nullable)color blurRadius:(CGFloat)blurRadius SWIFT_WARN_UNUSED_RESULT;
/// Generate UIImage mask for given class.
/// The generated image size will fit the original image passed into prediction, applying rotation.
/// If the image was center cropped, will return an image that covers the cropped image.
/// \param segmentClass Class for the mask.
///
/// \param options Options for the mask.
///
/// \param resize If true, resizes mask to input image size.
///
///
/// returns:
/// Mask for class.
- (UIImage * _Nullable)buildSingleClassMask:(ModelSegmentationClass * _Nonnull)segmentClass options:(FritzVisionSegmentationMaskOptions * _Nonnull)options resize:(BOOL)resize SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("FritzVisionSkyClass")
@interface FritzVisionSkyClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sky;)
+ (ModelSegmentationClass * _Nonnull)sky SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect the sky.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSkySegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect the sky.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSkySegmentationModelAccurate : FritzVisionSkySegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionSkySegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSkySegmentationModelFast : FritzVisionSkySegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionSkySegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect the sky.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionSkySegmentationModelSmall : FritzVisionSkySegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionSkySegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11FritzVision21FritzVisionStyleModel") SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_DEPRECATED_MSG("", "FritzVisionStylePredictor")
@interface FritzVisionStyleModel : FritzVisionStylePredictor
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Options for running style transfer models.
SWIFT_CLASS_NAMED("FritzVisionStyleModelOptions")
@interface FritzVisionStyleModelOptions : NSObject
/// Crop and scale option. Default option is .scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model).
/// In iOS 12, scaleFit would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// If you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
/// Resize the output to match the FritzVisionImage size.
@property (nonatomic) BOOL resizeOutputToInputDimensions;
/// Sets dimensions of input image for flexible model. Note that setting this to higher resolutions will increase
/// model processing time.
@property (nonatomic, strong) FlexibleModelDimensions * _Nonnull flexibleModelDimensions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionStylePredictor (SWIFT_EXTENSION(FritzVision))
/// Fetch and load Style Models for the given tags.
/// Note that this instantiates all models which could cause memory pressure if you are loading many models.
/// If you do not want to immediately instantiate the models, create a ModelTagManager and manage loading yourself.
/// \param tags List of tags to load models for.
///
/// \param wifiRequiredForModelDownload If true, client must be connected to a wifi network to download a model. Default is false.
///
/// \param completionHandler Completion handler with instantiated FritzVisionStylePredictors
///
+ (void)fetchStyleModelsForTags:(NSArray<NSString *> * _Nonnull)tags wifiRequiredForModelDownload:(BOOL)wifiRequiredForModelDownload withCompletionHandler:(void (^ _Nonnull)(NSArray<FritzVisionStylePredictor *> * _Nullable, NSError * _Nullable))completionHandler;
@end






SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionStylePredictor (SWIFT_EXTENSION(FritzVision))
/// Model metadata set in webapp.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Model tags set in webapp.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, FritzHumanSkeleton, "HumanSkeleton", open) {
  FritzHumanSkeletonNose = 0,
  FritzHumanSkeletonLeftEye = 1,
  FritzHumanSkeletonRightEye = 2,
  FritzHumanSkeletonLeftEar = 3,
  FritzHumanSkeletonRightEar = 4,
  FritzHumanSkeletonLeftShoulder = 5,
  FritzHumanSkeletonRightShoulder = 6,
  FritzHumanSkeletonLeftElbow = 7,
  FritzHumanSkeletonRightElbow = 8,
  FritzHumanSkeletonLeftWrist = 9,
  FritzHumanSkeletonRightWrist = 10,
  FritzHumanSkeletonLeftHip = 11,
  FritzHumanSkeletonRightHip = 12,
  FritzHumanSkeletonLeftKnee = 13,
  FritzHumanSkeletonRightKnee = 14,
  FritzHumanSkeletonLeftAnkle = 15,
  FritzHumanSkeletonRightAnkle = 16,
};




SWIFT_CLASS_NAMED("ModelSegmentationClass")
@interface ModelSegmentationClass : NSObject
/// Index in output array from model.
@property (nonatomic, readonly) NSInteger index;
/// Label name for Model Segmentation Class.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11FritzVision7Point3D")
@interface Point3D : NSObject
@property (nonatomic, readonly) CGFloat x;
@property (nonatomic, readonly) CGFloat y;
@property (nonatomic, readonly) CGFloat z;
- (nonnull instancetype)initWithX:(CGFloat)x y:(CGFloat)y z:(CGFloat)z OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (NSArray<NSNumber *> * _Nonnull)toArray SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Point3D (SWIFT_EXTENSION(FritzVision))
- (nonnull instancetype)initWith:(NSArray<NSNumber *> * _Nonnull)array;
@end






/// Options for Pose Model.
SWIFT_CLASS("_TtC11FritzVision27PoseLiftingPredictorOptions")
@interface PoseLiftingPredictorOptions : NSObject
/// Default Pose model options.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PoseLiftingPredictorOptions * _Nonnull defaults;)
+ (PoseLiftingPredictorOptions * _Nonnull)defaults SWIFT_WARN_UNUSED_RESULT;
/// If true only uses CPU to run predictions.
@property (nonatomic) BOOL useCPUOnly;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, FritzSegmentationRegion, "SegmentationRegion", open) {
/// Foreground is the region of the image where the alpha value of a mask is greater than 0.
  FritzSegmentationRegionForeground = 0,
/// Background is the region of the image where the alpha value of a mask is 0.
  FritzSegmentationRegionBackground = 1,
};


SWIFT_CLASS_NAMED("StyleOutputDimensions") SWIFT_DEPRECATED_MSG("", "FlexibleModelDimensions")
@interface StyleOutputDimensions : FlexibleModelDimensions
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithWidth:(NSInteger)width withHeight:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
@end















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreML;
@import CoreMedia;
@import CoreVideo;
@import ImageIO;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FritzVision",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif









@class FritzManagedModel;
@class FritzMLModel;
@protocol FritzSwiftIdentifiedModel;

SWIFT_CLASS("_TtC11FritzVision13BasePredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface BasePredictor : NSObject
@property (nonatomic, readonly, strong) FritzManagedModel * _Nonnull managedModel;
/// Initialize model with FritzMLModel
/// \param model FritzMLModel
///
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
/// Initialize model with FritzMLModel
/// \param model FritzMLModel
///
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
/// Model metadata set in webapp.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Model tags set in webapp.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// BoundingBox Contains coordinates to draw bounding boxes on images as predicted directly by the model.  However, because of cropping or resizing done to accomadate model size constraints, the default values may not map to coordinates in your view.  Use the toCGRect functions to convert bounding box coordinates to fit the image.
SWIFT_CLASS_NAMED("BoundingBox")
@interface BoundingBox : NSObject
- (nonnull instancetype)initWithYMin:(double)yMin xMin:(double)xMin yMax:(double)yMax xMax:(double)xMax OBJC_DESIGNATED_INITIALIZER;
- (CGRect)imgHeight:(double)imgHeight imgWidth:(double)imgWidth SWIFT_WARN_UNUSED_RESULT;
- (CGRect)imgHeight:(double)imgHeight imgWidth:(double)imgWidth xOffset:(double)xOffset yOffset:(double)yOffset SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CALayer;
@class UIColor;

SWIFT_CLASS_NAMED("BoundingBoxOutline")
@interface BoundingBoxOutline : NSObject
/// Add shape and text to parent layer
/// \param parent parent CALayer
///
- (void)parent:(CALayer * _Nonnull)parent;
/// Show Bounding box.
/// \param frame CGRect of coordinates to draw box
///
/// \param label Classified label
///
/// \param color Color of bounding box outline
///
/// \param textColor Classified label text
///
- (void)frame:(CGRect)frame label:(NSString * _Nonnull)label color:(UIColor * _Nonnull)color textColor:(UIColor * _Nonnull)textColor;
/// Hide bounding box from appearing in view.
- (void)hide;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CIContext;
@class CIImage;
enum ResizeSamplingMethod : NSInteger;

SWIFT_CLASS("_TtC11FritzVision15CIImagePipeline") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline : NSObject
/// Image context used to render CIImage pipeline
@property (nonatomic, readonly, strong) CIContext * _Nonnull context;
/// Current CIImage.
@property (nonatomic, strong) CIImage * _Nonnull image;
/// Sampling method use when resizing images.  Defaults to <code>.affine</code>, which is the fastest but produces the most artifacts.
@property (nonatomic) enum ResizeSamplingMethod resizeSamplingMethod;
/// Create <code>CIImagePipeline</code>
/// \param image Input CIImage
///
/// \param context CIImage context. If not provided, uses FritzVisionImage shared context.
///
- (nonnull instancetype)init:(CIImage * _Nonnull)image context:(CIContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
/// Render current CIImage to pixelBuffer
- (CVPixelBufferRef _Nullable)render SWIFT_WARN_UNUSED_RESULT;
- (CVPixelBufferRef _Nullable)emptyPixelBuffer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Sampling method used to resize image.
typedef SWIFT_ENUM_NAMED(NSInteger, ResizeSamplingMethod, "ResizeSamplingMethod", open) {
/// Lanczos Sampling method
  ResizeSamplingMethodLanczos = 0,
/// Bicubic Sampling method.
  ResizeSamplingMethodBicubic = 1,
/// Affine transformation resampling. This is the fastest method but results in more edge artifacts.
  ResizeSamplingMethodAffine = 2,
};

@class UIImage;
enum FritzSegmentationRegion : NSInteger;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline (SWIFT_EXTENSION(FritzVision))
/// Mask image using a single class alpha RGBA mask.
/// \param alphaMask RGBA alpha mask
///
/// \param segmentationRegion Region of image to remove.  <code>background</code> removes all areas
/// where alpha value of mask is 0.
///
- (void)maskWith:(UIImage * _Nonnull)alphaMask removing:(enum FritzSegmentationRegion)segmentationRegion;
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline (SWIFT_EXTENSION(FritzVision))
- (void)maskWith:(AVDepthData * _Nonnull)depthData focusingAtDepth:(CGFloat)depth focalWidth:(CGFloat)focalWidth;
- (void)maskWith:(AVDepthData * _Nonnull)depthData pixelsFartherThan:(CGFloat)depth;
- (void)maskWith:(AVDepthData * _Nonnull)depthData pixelsCloserThan:(CGFloat)depth;
- (void)blurWith:(AVDepthData * _Nonnull)depthData focusedAt:(CGFloat)depth focalWidth:(CGFloat)focalWidth blurRadius:(CGFloat)blurRadius;
- (void)blurWithPixelsFartherThan:(CGFloat)depth using:(AVDepthData * _Nonnull)depthData blurRadius:(CGFloat)blurRadius;
- (void)blurWithPixelsCloserThan:(CGFloat)depth using:(AVDepthData * _Nonnull)depthData blurRadius:(CGFloat)blurRadius;
@end

@class CIBlendKernel;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline (SWIFT_EXTENSION(FritzVision))
/// Center Crop Image
- (void)centerCrop;
/// Orients image from given orientation to up orientation.
/// \param orientation Orientation
///
- (void)orient:(CGImagePropertyOrientation)orientation;
/// Blends image with provided mask.
/// \param mask Alpha matting mask to blend image with
///
/// \param kernel Blend kernel used to blend mask with background image.
///
/// \param opacity Opacity of mask [0.0 - 1.0] overlayed on source image.
///
- (void)blendWith:(UIImage * _Nonnull)mask blendKernel:(CIBlendKernel * _Nonnull)kernel opacity:(CGFloat)opacity;
- (CIImage * _Nullable)changeOpacityOn:(CIImage * _Nonnull)image to:(CGFloat)opacity SWIFT_WARN_UNUSED_RESULT;
/// Blurs image.
/// \param blurRadius Pixel radius of the blur kernel
///
- (void)blurWithBlurRadius:(CGFloat)blurRadius;
@end


SWIFT_CLASS_NAMED("FlexibleModelDimensions")
@interface FlexibleModelDimensions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithWidth:(NSInteger)width withHeight:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
@end


@interface FlexibleModelDimensions (SWIFT_EXTENSION(FritzVision))
/// Use original image dimensions.  Model will throw an error if image dimensions are not within range of acceptable input sizes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull original;)
+ (FlexibleModelDimensions * _Nonnull)original SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull lowResolution;)
+ (FlexibleModelDimensions * _Nonnull)lowResolution SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull mediumResolution;)
+ (FlexibleModelDimensions * _Nonnull)mediumResolution SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull highResolution;)
+ (FlexibleModelDimensions * _Nonnull)highResolution SWIFT_WARN_UNUSED_RESULT;
@end

/// Describes the orientation of the image. The orientations match the <a href="https://developer.apple.com/documentation/imageio/cgimagepropertyorientation">CGImagePropertyOrientation</a> Enumeration from Apple. Refer to that documentation for clear descriptions of each case.
typedef SWIFT_ENUM(int32_t, FritzImageOrientation, open) {
  FritzImageOrientationUp = 1,
  FritzImageOrientationUpMirrored = 2,
  FritzImageOrientationDown = 3,
  FritzImageOrientationDownMirrored = 4,
  FritzImageOrientationLeftMirrored = 5,
  FritzImageOrientationRight = 6,
  FritzImageOrientationRightMirrored = 7,
  FritzImageOrientationLeft = 8,
};

@class NSCoder;

SWIFT_CLASS("_TtC11FritzVision14FritzVideoView") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVideoView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Initialize as an empty view.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



typedef SWIFT_ENUM_NAMED(NSInteger, FritzVisionCropAndScale, "FritzVisionCropAndScale", open) {
  FritzVisionCropAndScaleCenterCrop = 1,
  FritzVisionCropAndScaleScaleFill = 2,
  FritzVisionCropAndScaleScaleFit = 3,
};

@class FritzVisionImage;
@class FritzVisionDepthModelOptions;

SWIFT_CLASS_NAMED("FritzVisionDepthModel") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionDepthModel : BasePredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Run image segmentation on a FritzVisionDepthMap.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request.
/// Contains a FritzVisionDepthMap or error message.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionDepthModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(AVDepthData * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS_NAMED("FritzVisionDepthModelOptions")
@interface FritzVisionDepthModelOptions : NSObject
/// Crop and scale option. Default value is scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, FritzVisionError, open) {
  FritzVisionErrorInvalidImageBuffer = 0,
  FritzVisionErrorErrorProcessingImage = 1,
  FritzVisionErrorImageNotEncodable = 2,
};
static NSString * _Nonnull const FritzVisionErrorDomain = @"FritzVision.FritzVisionError";

@class FritzVisionStyleModelOptions;

/// Construct a Flexible Style Transfer model and run on any FritzVisionImage.
/// Produces stylized images with customizable output sizes.
SWIFT_CLASS_NAMED("FritzVisionStylePredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionStylePredictor : NSObject
@property (nonatomic, readonly, strong) FritzManagedModel * _Nonnull managedModel;
/// Initialize FritzStyleTransferModel with your own trained style model.
/// \param model Fritz model to use.
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
/// Initialize FritzVisionStylePredictor with your own trained style model.
/// \param model Fritz model to use.
///
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize FritzVisionStylePredictor with your own trained style model.
/// \param model Fritz model to use.
///
/// \param managedModel FritzManagedModel to use.
///
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Run Style Transfer on a FritzVisionImage.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request.
/// Contains a FritzVisionSegmentationResult or error message.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionStyleModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(CVPixelBufferRef _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11FritzVision29FritzVisionFlexibleStyleModel") SWIFT_AVAILABILITY(ios,introduced=12.0) SWIFT_DEPRECATED_MSG("", "FritzVisionStylePredictor")
@interface FritzVisionFlexibleStyleModel : FritzVisionStylePredictor
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end

@class ModelSegmentationClass;

/// Class labels for FritzVisionHairPredictor
SWIFT_CLASS_NAMED("FritzVisionHairClass")
@interface FritzVisionHairClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull hair;)
+ (ModelSegmentationClass * _Nonnull)hair SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class FritzVisionSegmentationModelOptions;
@class FritzVisionSegmentationResult;

SWIFT_CLASS_NAMED("FritzVisionSegmentationModel") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSegmentationModel : BasePredictor
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull classes;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
/// Run image segmentation on a FritzVisionImage.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request.  Contains a FritzVisionSegmentationResult or error message.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionSegmentationModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(FritzVisionSegmentationResult * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model SWIFT_UNAVAILABLE;
@end


/// Predictor that takes predicts pixels that are Hair
SWIFT_CLASS_NAMED("FritzVisionHairSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionHairSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end

@class FritzModelConfiguration;

SWIFT_CLASS_NAMED("FritzVisionHairSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionHairSegmentationModelAccurate : FritzVisionHairSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionHairSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionHairSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionHairSegmentationModelFast : FritzVisionHairSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionHairSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionHairSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionHairSegmentationModelSmall : FritzVisionHairSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionHairSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


@class AVCaptureConnection;

/// An image or image buffer used in vision detection.
SWIFT_CLASS_NAMED("FritzVisionImage") SWIFT_AVAILABILITY(watchos,introduced=4.0) SWIFT_AVAILABILITY(tvos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_AVAILABILITY(macos,introduced=10.13)
@interface FritzVisionImage : NSObject
/// Shared CIContext
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CIContext * _Nonnull sharedContext;)
+ (CIContext * _Nonnull)sharedContext SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBuffer:(CMSampleBufferRef _Nonnull)buffer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageBuffer:(CVPixelBufferRef _Nonnull)imageBuffer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCIImage:(CIImage * _Nonnull)ciImage;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image orientation:(CGImagePropertyOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageBuffer:(CVPixelBufferRef _Nonnull)imageBuffer orientation:(CGImagePropertyOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer connection:(AVCaptureConnection * _Nonnull)connection OBJC_DESIGNATED_INITIALIZER;
- (id _Nullable)debugQuickLookObject SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
/// Blends mask with current image.
/// Rotates source image to <code>up</code> orientation before blending.
/// \param mask Overlaying image
///
/// \param blendKernel Blend mode used to blend images.
///
/// \param samplingMethod Method used to sample images when resizing images.
///
/// \param opacity Opacity of mask [0.0 - 1.0] overlayed on source image.
///
///
/// returns:
/// Blended image
- (UIImage * _Nullable)blendWithMask:(UIImage * _Nonnull)mask blendMode:(CIBlendKernel * _Nonnull)blendKernel samplingMethod:(enum ResizeSamplingMethod)samplingMethod opacity:(CGFloat)opacity SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
/// Uses an alpha mask to cutout maked regions, specifying with area of mask to keep.
/// \param alphaMask Alpha Mask with a single class.
///
/// \param segmentationRegion Region of alpha mask to remove.
///
/// \param samplingMethod Resizing sampling method to use.
///
/// \param context Optional Core Image context to use.  Defaults to
/// <code>FritzVisionImage.sharedContext</code>
///
///
/// returns:
/// Masked image.
- (UIImage * _Nullable)maskWithImage:(UIImage * _Nonnull)alphaMask removingPixelsIn:(enum FritzSegmentationRegion)segmentationRegion samplingMethod:(enum ResizeSamplingMethod)samplingMethod context:(CIContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
- (CVPixelBufferRef _Nullable)rotate SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "rotated");
/// Returns image applying rotation from <code>metatadata</code>.
- (UIImage * _Nullable)rotated SWIFT_WARN_UNUSED_RESULT;
/// Returns image applying rotation from <code>metatadata</code>.
- (UIImage * _Nullable)resizedToSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
/// Dimensions of FritzVisionImage, after rotation
@property (nonatomic, readonly) CGSize size;
@end


SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
- (UIImage * _Nullable)toImage SWIFT_WARN_UNUSED_RESULT;
- (CVPixelBufferRef _Nullable)toPixelBuffer SWIFT_WARN_UNUSED_RESULT;
@end






SWIFT_CLASS_NAMED("FritzVisionImageMetadata") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImageMetadata : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Orientation defaults to <code>FritzImageOrientation.right</code> which should work for rear facing cameras with a device orientation of Portrait.
@property (nonatomic) enum FritzImageOrientation orientation;
@property (nonatomic, readonly) CGImagePropertyOrientation cgOrientation;
@end


/// Represents a label for an image.
SWIFT_CLASS_NAMED("FritzVisionLabel") SWIFT_AVAILABILITY(watchos,introduced=4.0) SWIFT_AVAILABILITY(tvos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_AVAILABILITY(macos,introduced=10.13)
@interface FritzVisionLabel : NSObject
/// Human readable string of detected label.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Prediction confidence for label in range of [0, 1]
@property (nonatomic, readonly) double confidence;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label confidence:(double)confidence OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FritzVisionLabelError, open) {
  FritzVisionLabelErrorNoVisionModel = 0,
};
static NSString * _Nonnull const FritzVisionLabelErrorDomain = @"FritzVision.FritzVisionLabelError";

@class FritzVisionLabelModelOptions;

SWIFT_CLASS("_TtC11FritzVision25FritzVisionLabelPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLabelPredictor : BasePredictor
/// Predict poses from a FritzImage.
/// \param input The image to use to dectect poses.
///
/// \param options The options used to configure the pose results.
///
/// \param completion Handler to call back on the main thread with poses or error.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionLabelModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<FritzVisionLabel *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionLabelModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLabelModelFast : FritzVisionLabelPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
+ (void)setModelConfig:(FritzModelConfiguration * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
/// Is WiFi required to download pose model over the air.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionLabelModelOptions")
@interface FritzVisionLabelModelOptions : NSObject
/// Confidence threshold for prediction results in the range of [0, 1], default is 0.6.
@property (nonatomic) double threshold;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
/// Number of results to return from request.
@property (nonatomic) NSInteger numResults;
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionLivingRoomClass")
@interface FritzVisionLivingRoomClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull chair;)
+ (ModelSegmentationClass * _Nonnull)chair SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull wall;)
+ (ModelSegmentationClass * _Nonnull)wall SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull coffeeTable;)
+ (ModelSegmentationClass * _Nonnull)coffeeTable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull ceiling;)
+ (ModelSegmentationClass * _Nonnull)ceiling SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull floor;)
+ (ModelSegmentationClass * _Nonnull)floor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bed;)
+ (ModelSegmentationClass * _Nonnull)bed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull lamp;)
+ (ModelSegmentationClass * _Nonnull)lamp SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sofa;)
+ (ModelSegmentationClass * _Nonnull)sofa SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull windowpane;)
+ (ModelSegmentationClass * _Nonnull)windowpane SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull pillow;)
+ (ModelSegmentationClass * _Nonnull)pillow SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLivingRoomSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes SWIFT_UNAVAILABLE;
@end


/// Image segmentation model to detect common living room objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLivingRoomSegmentationModelAccurate : FritzVisionLivingRoomSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionLivingRoomSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common living room objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLivingRoomSegmentationModelFast : FritzVisionLivingRoomSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionLivingRoomSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common living room objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionLivingRoomSegmentationModelSmall : FritzVisionLivingRoomSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionLivingRoomSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionObject") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionObject : NSObject
@property (nonatomic, readonly, strong) FritzVisionLabel * _Nonnull detectedLabel;
/// BoundingBox of detected object.
@property (nonatomic, readonly, strong) BoundingBox * _Nonnull boundingBox;
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
@property (nonatomic, readonly) double confidence;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithLabel:(FritzVisionLabel * _Nonnull)label boundingBox:(BoundingBox * _Nonnull)boundingBox OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FritzVisionObjectModelOptions;

SWIFT_CLASS_NAMED("FritzVisionObjectPredictor") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionObjectPredictor : BasePredictor
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
/// Initialize Object model using a custom model with accessible class names.
/// For models with built-in post processing and built-in class names.
/// Uses default class names as a fall back if none are found.
/// \param model IdentifiedModel to use
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
/// Initialize Object model using a custom model with the given class names.
/// For models with built-in post processing without built-in class names.
/// \param identifiedModel IdentifiedModel to use
///
/// \param classNames Labels for objects
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)identifiedModel processedLabels:(NSArray<NSString *> * _Nonnull)classNames OBJC_DESIGNATED_INITIALIZER;
/// Run prediction for vision object model.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request has finished processing.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionObjectModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<FritzVisionObject *> * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("FritzVisionObjectModelFast") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionObjectModelFast : FritzVisionObjectPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionObjectModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)identifiedModel processedLabels:(NSArray<NSString *> * _Nonnull)classNames OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionObjectModelOptions")
@interface FritzVisionObjectModelOptions : NSObject
/// Confidence threshold for prediction results in the range of [0, 1], default is 0.6.
@property (nonatomic) double threshold;
/// Threshold for overlap of items within a single class in range [0, 1].  Lower values are more strict.
@property (nonatomic) double iouThreshold;
/// Number of results to return from request.
@property (nonatomic) NSInteger numResults;
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic, readonly) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionOutdoorClass")
@interface FritzVisionOutdoorClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull building;)
+ (ModelSegmentationClass * _Nonnull)building SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sky;)
+ (ModelSegmentationClass * _Nonnull)sky SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull tree;)
+ (ModelSegmentationClass * _Nonnull)tree SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sidewalk;)
+ (ModelSegmentationClass * _Nonnull)sidewalk SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull ground;)
+ (ModelSegmentationClass * _Nonnull)ground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull car;)
+ (ModelSegmentationClass * _Nonnull)car SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull water;)
+ (ModelSegmentationClass * _Nonnull)water SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull house;)
+ (ModelSegmentationClass * _Nonnull)house SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull fence;)
+ (ModelSegmentationClass * _Nonnull)fence SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sign;)
+ (ModelSegmentationClass * _Nonnull)sign SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull skyscraper;)
+ (ModelSegmentationClass * _Nonnull)skyscraper SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bridge;)
+ (ModelSegmentationClass * _Nonnull)bridge SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull river;)
+ (ModelSegmentationClass * _Nonnull)river SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bus;)
+ (ModelSegmentationClass * _Nonnull)bus SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull truck;)
+ (ModelSegmentationClass * _Nonnull)truck SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull van;)
+ (ModelSegmentationClass * _Nonnull)van SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull motorbike;)
+ (ModelSegmentationClass * _Nonnull)motorbike SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bicycle;)
+ (ModelSegmentationClass * _Nonnull)bicycle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull trafficLight;)
+ (ModelSegmentationClass * _Nonnull)trafficLight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull person;)
+ (ModelSegmentationClass * _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionOutdoorSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionOutdoorSegmentationModelAccurate : FritzVisionOutdoorSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionOutdoorSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionOutdoorSegmentationModelFast : FritzVisionOutdoorSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionOutdoorSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionOutdoorSegmentationModelSmall : FritzVisionOutdoorSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionOutdoorSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



/// Class labels for FritzVisionPeopleAndPetSegmentationMediumModel
SWIFT_CLASS_NAMED("FritzVisionPeopleAndPetClass")
@interface FritzVisionPeopleAndPetSegmentationMediumClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull petOrPerson;)
+ (ModelSegmentationClass * _Nonnull)petOrPerson SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people and pets.
SWIFT_CLASS_NAMED("FritzVisionPeopleAndPetSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleAndPetSegmentationMediumModel : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people and pets.
SWIFT_CLASS_NAMED("FritzVisionPeopleAndPetSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleAndPetSegmentationModelAccurate : FritzVisionPeopleAndPetSegmentationMediumModel
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleAndPetSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



/// Class labels for FritzVisionPeoplePredictor
SWIFT_CLASS_NAMED("FritzVisionPeopleClass")
@interface FritzVisionPeopleClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull person;)
+ (ModelSegmentationClass * _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Predictor that takes predicts pixels that are people
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people.
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleSegmentationModelAccurate : FritzVisionPeopleSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people.
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleSegmentationModelFast : FritzVisionPeopleSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people.
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionPeopleSegmentationModelSmall : FritzVisionPeopleSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionPetClass")
@interface FritzVisionPetClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull pet;)
+ (ModelSegmentationClass * _Nonnull)pet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPetSegmentationPredictor : FritzVisionSegmentationModel
/// Build Pet Segmentation Model with provided model.
/// \param model Model to use
///
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
/// Build Pet Segmentation Model with provided model.
/// \param model Model to use
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPetSegmentationModelAccurate : FritzVisionPetSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPetSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPetSegmentationModelFast : FritzVisionPetSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPetSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionPetSegmentationModelSmall : FritzVisionPetSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPetSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



/// Model used to create a 3D pose from 2D pose
SWIFT_CLASS("_TtC11FritzVision27FritzVisionPoseLiftingModel") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPoseLiftingModel : BasePredictor
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end






/// Options for Pose Model.
SWIFT_CLASS_NAMED("FritzVisionPoseModelOptions")
@interface FritzVisionPoseModelOptions : NSObject
/// Crop and scale option. Default value is scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
/// Minimum score a part must have to potentially build a new pose. The pose will include parts below this
/// threshold, but a part below this threshold will not trigger a new pose instance to be built.
@property (nonatomic) double minPartThreshold;
/// Minimum score a pose must have to be included in results.
@property (nonatomic) double minPoseThreshold;
/// NMS radius for pose
@property (nonatomic) NSInteger nmsRadius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11FritzVision34FritzVisionSegmentationMaskOptions") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSegmentationMaskOptions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionSegmentationModelOptions")
@interface FritzVisionSegmentationModelOptions : NSObject
/// Crop and scale option. Default value is scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MLMultiArray;

SWIFT_CLASS_NAMED("FritzVisionSegmentationResult") SWIFT_AVAILABILITY(watchos,introduced=4.0) SWIFT_AVAILABILITY(tvos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_AVAILABILITY(macos,introduced=10.13)
@interface FritzVisionSegmentationResult : NSObject
/// Height of model output array.
@property (nonatomic, readonly) NSInteger height;
/// Width of model output array.
@property (nonatomic, readonly) NSInteger width;
/// Model classes.
@property (nonatomic, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull classes;
/// Raw MLMultiArray result from prediction.
@property (nonatomic, readonly, strong) MLMultiArray * _Nonnull predictionResult;
- (NSArray<NSNumber *> * _Nonnull)getArrayOfConfidenceScoresforClass:(ModelSegmentationClass * _Nonnull)segmentClass ClippingAbove:(double)threshold zeroingBelow:(double)minThreshold SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSegmentationResult (SWIFT_EXTENSION(FritzVision))
/// Generate UIImage mask from most likely class at each pixel.
/// The generated image size will fit the original image passed into prediction, applying rotation.
/// If the image was center cropped, will return an image that covers the cropped image.
/// \param minScore Minimum threshold value needed to count. By default zero.
/// You can set this property to filter out classes that may be the most likely but still
/// have a lower probability.
///
/// \param maxAlpha Alpha value of the color (0-255) for detected classes. By default completely opaque.
///
/// \param resize If true (default) mask will be scaled to the size of the input image.
///
/// \param blurRadius The radius to blur the edges of the mask.
///
///
/// returns:
/// Image
- (UIImage * _Nullable)buildMultiClassMaskWithMinAcceptedScore:(double)minScore maxAlpha:(uint8_t)maxAlpha resize:(BOOL)resize blurRadius:(CGFloat)blurRadius SWIFT_WARN_UNUSED_RESULT;
/// Generate UIImage mask for given class.
/// The generated image size will fit the original image passed into prediction, applying rotation.
/// If the image was center cropped, will return an image that covers the cropped image.
/// \param segmentClass Class for the mask.
///
/// \param clippingThreshold All confidence scores above this value will be clipped to 1.
/// Range [0.0-1.0].
///
/// \param zeroingThreshold All confidence scores below this value will be set to 0.
/// Range [0.0-1.0].
///
/// \param maxAlpha Maximum alpha value of mask. Confidence scores will be multiplied by this value
/// after clipping and zeroing.
///
/// \param resize If true, resizes mask to input image size.
///
/// \param color The color of mask.
///
/// \param blurRadius The radius to blur the edges of the mask.
///
///
/// returns:
/// Mask for class.
- (UIImage * _Nullable)buildSingleClassMask:(ModelSegmentationClass * _Nonnull)segmentClass clippingScoresAbove:(double)clippingThreshold zeroingScoresBelow:(double)zeroingThreshold maxAlpha:(uint8_t)maxAlpha resize:(BOOL)resize color:(UIColor * _Nullable)color blurRadius:(CGFloat)blurRadius SWIFT_WARN_UNUSED_RESULT;
/// Generate UIImage mask for given class.
/// The generated image size will fit the original image passed into prediction, applying rotation.
/// If the image was center cropped, will return an image that covers the cropped image.
/// \param segmentClass Class for the mask.
///
/// \param options Options for the mask.
///
/// \param resize If true, resizes mask to input image size.
///
///
/// returns:
/// Mask for class.
- (UIImage * _Nullable)buildSingleClassMask:(ModelSegmentationClass * _Nonnull)segmentClass options:(FritzVisionSegmentationMaskOptions * _Nonnull)options resize:(BOOL)resize SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("FritzVisionSkyClass")
@interface FritzVisionSkyClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sky;)
+ (ModelSegmentationClass * _Nonnull)sky SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect the sky.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSkySegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect the sky.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSkySegmentationModelAccurate : FritzVisionSkySegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionSkySegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSkySegmentationModelFast : FritzVisionSkySegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionSkySegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect the sky.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionSkySegmentationModelSmall : FritzVisionSkySegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionSkySegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11FritzVision21FritzVisionStyleModel") SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_DEPRECATED_MSG("", "FritzVisionStylePredictor")
@interface FritzVisionStyleModel : FritzVisionStylePredictor
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Options for running style transfer models.
SWIFT_CLASS_NAMED("FritzVisionStyleModelOptions")
@interface FritzVisionStyleModelOptions : NSObject
/// Crop and scale option. Default option is .scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model).
/// In iOS 12, scaleFit would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// If you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
/// Resize the output to match the FritzVisionImage size.
@property (nonatomic) BOOL resizeOutputToInputDimensions;
/// Sets dimensions of input image for flexible model. Note that setting this to higher resolutions will increase
/// model processing time.
@property (nonatomic, strong) FlexibleModelDimensions * _Nonnull flexibleModelDimensions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionStylePredictor (SWIFT_EXTENSION(FritzVision))
/// Fetch and load Style Models for the given tags.
/// Note that this instantiates all models which could cause memory pressure if you are loading many models.
/// If you do not want to immediately instantiate the models, create a ModelTagManager and manage loading yourself.
/// \param tags List of tags to load models for.
///
/// \param wifiRequiredForModelDownload If true, client must be connected to a wifi network to download a model. Default is false.
///
/// \param completionHandler Completion handler with instantiated FritzVisionStylePredictors
///
+ (void)fetchStyleModelsForTags:(NSArray<NSString *> * _Nonnull)tags wifiRequiredForModelDownload:(BOOL)wifiRequiredForModelDownload withCompletionHandler:(void (^ _Nonnull)(NSArray<FritzVisionStylePredictor *> * _Nullable, NSError * _Nullable))completionHandler;
@end






SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionStylePredictor (SWIFT_EXTENSION(FritzVision))
/// Model metadata set in webapp.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Model tags set in webapp.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, FritzHumanSkeleton, "HumanSkeleton", open) {
  FritzHumanSkeletonNose = 0,
  FritzHumanSkeletonLeftEye = 1,
  FritzHumanSkeletonRightEye = 2,
  FritzHumanSkeletonLeftEar = 3,
  FritzHumanSkeletonRightEar = 4,
  FritzHumanSkeletonLeftShoulder = 5,
  FritzHumanSkeletonRightShoulder = 6,
  FritzHumanSkeletonLeftElbow = 7,
  FritzHumanSkeletonRightElbow = 8,
  FritzHumanSkeletonLeftWrist = 9,
  FritzHumanSkeletonRightWrist = 10,
  FritzHumanSkeletonLeftHip = 11,
  FritzHumanSkeletonRightHip = 12,
  FritzHumanSkeletonLeftKnee = 13,
  FritzHumanSkeletonRightKnee = 14,
  FritzHumanSkeletonLeftAnkle = 15,
  FritzHumanSkeletonRightAnkle = 16,
};




SWIFT_CLASS_NAMED("ModelSegmentationClass")
@interface ModelSegmentationClass : NSObject
/// Index in output array from model.
@property (nonatomic, readonly) NSInteger index;
/// Label name for Model Segmentation Class.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11FritzVision7Point3D")
@interface Point3D : NSObject
@property (nonatomic, readonly) CGFloat x;
@property (nonatomic, readonly) CGFloat y;
@property (nonatomic, readonly) CGFloat z;
- (nonnull instancetype)initWithX:(CGFloat)x y:(CGFloat)y z:(CGFloat)z OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (NSArray<NSNumber *> * _Nonnull)toArray SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Point3D (SWIFT_EXTENSION(FritzVision))
- (nonnull instancetype)initWith:(NSArray<NSNumber *> * _Nonnull)array;
@end






/// Options for Pose Model.
SWIFT_CLASS("_TtC11FritzVision27PoseLiftingPredictorOptions")
@interface PoseLiftingPredictorOptions : NSObject
/// Default Pose model options.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PoseLiftingPredictorOptions * _Nonnull defaults;)
+ (PoseLiftingPredictorOptions * _Nonnull)defaults SWIFT_WARN_UNUSED_RESULT;
/// If true only uses CPU to run predictions.
@property (nonatomic) BOOL useCPUOnly;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, FritzSegmentationRegion, "SegmentationRegion", open) {
/// Foreground is the region of the image where the alpha value of a mask is greater than 0.
  FritzSegmentationRegionForeground = 0,
/// Background is the region of the image where the alpha value of a mask is 0.
  FritzSegmentationRegionBackground = 1,
};


SWIFT_CLASS_NAMED("StyleOutputDimensions") SWIFT_DEPRECATED_MSG("", "FlexibleModelDimensions")
@interface StyleOutputDimensions : FlexibleModelDimensions
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithWidth:(NSInteger)width withHeight:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
@end















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreML;
@import CoreMedia;
@import CoreVideo;
@import ImageIO;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FritzVision",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif









@class FritzManagedModel;
@class FritzMLModel;
@protocol FritzSwiftIdentifiedModel;

SWIFT_CLASS("_TtC11FritzVision13BasePredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface BasePredictor : NSObject
@property (nonatomic, readonly, strong) FritzManagedModel * _Nonnull managedModel;
/// Initialize model with FritzMLModel
/// \param model FritzMLModel
///
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
/// Initialize model with FritzMLModel
/// \param model FritzMLModel
///
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
/// Model metadata set in webapp.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Model tags set in webapp.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// BoundingBox Contains coordinates to draw bounding boxes on images as predicted directly by the model.  However, because of cropping or resizing done to accomadate model size constraints, the default values may not map to coordinates in your view.  Use the toCGRect functions to convert bounding box coordinates to fit the image.
SWIFT_CLASS_NAMED("BoundingBox")
@interface BoundingBox : NSObject
- (nonnull instancetype)initWithYMin:(double)yMin xMin:(double)xMin yMax:(double)yMax xMax:(double)xMax OBJC_DESIGNATED_INITIALIZER;
- (CGRect)imgHeight:(double)imgHeight imgWidth:(double)imgWidth SWIFT_WARN_UNUSED_RESULT;
- (CGRect)imgHeight:(double)imgHeight imgWidth:(double)imgWidth xOffset:(double)xOffset yOffset:(double)yOffset SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CALayer;
@class UIColor;

SWIFT_CLASS_NAMED("BoundingBoxOutline")
@interface BoundingBoxOutline : NSObject
/// Add shape and text to parent layer
/// \param parent parent CALayer
///
- (void)parent:(CALayer * _Nonnull)parent;
/// Show Bounding box.
/// \param frame CGRect of coordinates to draw box
///
/// \param label Classified label
///
/// \param color Color of bounding box outline
///
/// \param textColor Classified label text
///
- (void)frame:(CGRect)frame label:(NSString * _Nonnull)label color:(UIColor * _Nonnull)color textColor:(UIColor * _Nonnull)textColor;
/// Hide bounding box from appearing in view.
- (void)hide;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CIContext;
@class CIImage;
enum ResizeSamplingMethod : NSInteger;

SWIFT_CLASS("_TtC11FritzVision15CIImagePipeline") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline : NSObject
/// Image context used to render CIImage pipeline
@property (nonatomic, readonly, strong) CIContext * _Nonnull context;
/// Current CIImage.
@property (nonatomic, strong) CIImage * _Nonnull image;
/// Sampling method use when resizing images.  Defaults to <code>.affine</code>, which is the fastest but produces the most artifacts.
@property (nonatomic) enum ResizeSamplingMethod resizeSamplingMethod;
/// Create <code>CIImagePipeline</code>
/// \param image Input CIImage
///
/// \param context CIImage context. If not provided, uses FritzVisionImage shared context.
///
- (nonnull instancetype)init:(CIImage * _Nonnull)image context:(CIContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
/// Render current CIImage to pixelBuffer
- (CVPixelBufferRef _Nullable)render SWIFT_WARN_UNUSED_RESULT;
- (CVPixelBufferRef _Nullable)emptyPixelBuffer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Sampling method used to resize image.
typedef SWIFT_ENUM_NAMED(NSInteger, ResizeSamplingMethod, "ResizeSamplingMethod", open) {
/// Lanczos Sampling method
  ResizeSamplingMethodLanczos = 0,
/// Bicubic Sampling method.
  ResizeSamplingMethodBicubic = 1,
/// Affine transformation resampling. This is the fastest method but results in more edge artifacts.
  ResizeSamplingMethodAffine = 2,
};

@class UIImage;
enum FritzSegmentationRegion : NSInteger;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline (SWIFT_EXTENSION(FritzVision))
/// Mask image using a single class alpha RGBA mask.
/// \param alphaMask RGBA alpha mask
///
/// \param segmentationRegion Region of image to remove.  <code>background</code> removes all areas
/// where alpha value of mask is 0.
///
- (void)maskWith:(UIImage * _Nonnull)alphaMask removing:(enum FritzSegmentationRegion)segmentationRegion;
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline (SWIFT_EXTENSION(FritzVision))
- (void)maskWith:(AVDepthData * _Nonnull)depthData focusingAtDepth:(CGFloat)depth focalWidth:(CGFloat)focalWidth;
- (void)maskWith:(AVDepthData * _Nonnull)depthData pixelsFartherThan:(CGFloat)depth;
- (void)maskWith:(AVDepthData * _Nonnull)depthData pixelsCloserThan:(CGFloat)depth;
- (void)blurWith:(AVDepthData * _Nonnull)depthData focusedAt:(CGFloat)depth focalWidth:(CGFloat)focalWidth blurRadius:(CGFloat)blurRadius;
- (void)blurWithPixelsFartherThan:(CGFloat)depth using:(AVDepthData * _Nonnull)depthData blurRadius:(CGFloat)blurRadius;
- (void)blurWithPixelsCloserThan:(CGFloat)depth using:(AVDepthData * _Nonnull)depthData blurRadius:(CGFloat)blurRadius;
@end

@class CIBlendKernel;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CIImagePipeline (SWIFT_EXTENSION(FritzVision))
/// Center Crop Image
- (void)centerCrop;
/// Orients image from given orientation to up orientation.
/// \param orientation Orientation
///
- (void)orient:(CGImagePropertyOrientation)orientation;
/// Blends image with provided mask.
/// \param mask Alpha matting mask to blend image with
///
/// \param kernel Blend kernel used to blend mask with background image.
///
/// \param opacity Opacity of mask [0.0 - 1.0] overlayed on source image.
///
- (void)blendWith:(UIImage * _Nonnull)mask blendKernel:(CIBlendKernel * _Nonnull)kernel opacity:(CGFloat)opacity;
- (CIImage * _Nullable)changeOpacityOn:(CIImage * _Nonnull)image to:(CGFloat)opacity SWIFT_WARN_UNUSED_RESULT;
/// Blurs image.
/// \param blurRadius Pixel radius of the blur kernel
///
- (void)blurWithBlurRadius:(CGFloat)blurRadius;
@end


SWIFT_CLASS_NAMED("FlexibleModelDimensions")
@interface FlexibleModelDimensions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithWidth:(NSInteger)width withHeight:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
@end


@interface FlexibleModelDimensions (SWIFT_EXTENSION(FritzVision))
/// Use original image dimensions.  Model will throw an error if image dimensions are not within range of acceptable input sizes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull original;)
+ (FlexibleModelDimensions * _Nonnull)original SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull lowResolution;)
+ (FlexibleModelDimensions * _Nonnull)lowResolution SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull mediumResolution;)
+ (FlexibleModelDimensions * _Nonnull)mediumResolution SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlexibleModelDimensions * _Nonnull highResolution;)
+ (FlexibleModelDimensions * _Nonnull)highResolution SWIFT_WARN_UNUSED_RESULT;
@end

/// Describes the orientation of the image. The orientations match the <a href="https://developer.apple.com/documentation/imageio/cgimagepropertyorientation">CGImagePropertyOrientation</a> Enumeration from Apple. Refer to that documentation for clear descriptions of each case.
typedef SWIFT_ENUM(int32_t, FritzImageOrientation, open) {
  FritzImageOrientationUp = 1,
  FritzImageOrientationUpMirrored = 2,
  FritzImageOrientationDown = 3,
  FritzImageOrientationDownMirrored = 4,
  FritzImageOrientationLeftMirrored = 5,
  FritzImageOrientationRight = 6,
  FritzImageOrientationRightMirrored = 7,
  FritzImageOrientationLeft = 8,
};

@class NSCoder;

SWIFT_CLASS("_TtC11FritzVision14FritzVideoView") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVideoView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Initialize as an empty view.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



typedef SWIFT_ENUM_NAMED(NSInteger, FritzVisionCropAndScale, "FritzVisionCropAndScale", open) {
  FritzVisionCropAndScaleCenterCrop = 1,
  FritzVisionCropAndScaleScaleFill = 2,
  FritzVisionCropAndScaleScaleFit = 3,
};

@class FritzVisionImage;
@class FritzVisionDepthModelOptions;

SWIFT_CLASS_NAMED("FritzVisionDepthModel") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionDepthModel : BasePredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Run image segmentation on a FritzVisionDepthMap.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request.
/// Contains a FritzVisionDepthMap or error message.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionDepthModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(AVDepthData * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS_NAMED("FritzVisionDepthModelOptions")
@interface FritzVisionDepthModelOptions : NSObject
/// Crop and scale option. Default value is scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, FritzVisionError, open) {
  FritzVisionErrorInvalidImageBuffer = 0,
  FritzVisionErrorErrorProcessingImage = 1,
  FritzVisionErrorImageNotEncodable = 2,
};
static NSString * _Nonnull const FritzVisionErrorDomain = @"FritzVision.FritzVisionError";

@class FritzVisionStyleModelOptions;

/// Construct a Flexible Style Transfer model and run on any FritzVisionImage.
/// Produces stylized images with customizable output sizes.
SWIFT_CLASS_NAMED("FritzVisionStylePredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionStylePredictor : NSObject
@property (nonatomic, readonly, strong) FritzManagedModel * _Nonnull managedModel;
/// Initialize FritzStyleTransferModel with your own trained style model.
/// \param model Fritz model to use.
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
/// Initialize FritzVisionStylePredictor with your own trained style model.
/// \param model Fritz model to use.
///
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize FritzVisionStylePredictor with your own trained style model.
/// \param model Fritz model to use.
///
/// \param managedModel FritzManagedModel to use.
///
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Run Style Transfer on a FritzVisionImage.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request.
/// Contains a FritzVisionSegmentationResult or error message.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionStyleModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(CVPixelBufferRef _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11FritzVision29FritzVisionFlexibleStyleModel") SWIFT_AVAILABILITY(ios,introduced=12.0) SWIFT_DEPRECATED_MSG("", "FritzVisionStylePredictor")
@interface FritzVisionFlexibleStyleModel : FritzVisionStylePredictor
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end

@class ModelSegmentationClass;

/// Class labels for FritzVisionHairPredictor
SWIFT_CLASS_NAMED("FritzVisionHairClass")
@interface FritzVisionHairClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull hair;)
+ (ModelSegmentationClass * _Nonnull)hair SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class FritzVisionSegmentationModelOptions;
@class FritzVisionSegmentationResult;

SWIFT_CLASS_NAMED("FritzVisionSegmentationModel") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSegmentationModel : BasePredictor
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull classes;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
/// Run image segmentation on a FritzVisionImage.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request.  Contains a FritzVisionSegmentationResult or error message.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionSegmentationModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(FritzVisionSegmentationResult * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model SWIFT_UNAVAILABLE;
@end


/// Predictor that takes predicts pixels that are Hair
SWIFT_CLASS_NAMED("FritzVisionHairSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionHairSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end

@class FritzModelConfiguration;

SWIFT_CLASS_NAMED("FritzVisionHairSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionHairSegmentationModelAccurate : FritzVisionHairSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionHairSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionHairSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionHairSegmentationModelFast : FritzVisionHairSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionHairSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionHairSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionHairSegmentationModelSmall : FritzVisionHairSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionHairSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


@class AVCaptureConnection;

/// An image or image buffer used in vision detection.
SWIFT_CLASS_NAMED("FritzVisionImage") SWIFT_AVAILABILITY(watchos,introduced=4.0) SWIFT_AVAILABILITY(tvos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_AVAILABILITY(macos,introduced=10.13)
@interface FritzVisionImage : NSObject
/// Shared CIContext
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CIContext * _Nonnull sharedContext;)
+ (CIContext * _Nonnull)sharedContext SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBuffer:(CMSampleBufferRef _Nonnull)buffer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageBuffer:(CVPixelBufferRef _Nonnull)imageBuffer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCIImage:(CIImage * _Nonnull)ciImage;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image orientation:(CGImagePropertyOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageBuffer:(CVPixelBufferRef _Nonnull)imageBuffer orientation:(CGImagePropertyOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer connection:(AVCaptureConnection * _Nonnull)connection OBJC_DESIGNATED_INITIALIZER;
- (id _Nullable)debugQuickLookObject SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
/// Blends mask with current image.
/// Rotates source image to <code>up</code> orientation before blending.
/// \param mask Overlaying image
///
/// \param blendKernel Blend mode used to blend images.
///
/// \param samplingMethod Method used to sample images when resizing images.
///
/// \param opacity Opacity of mask [0.0 - 1.0] overlayed on source image.
///
///
/// returns:
/// Blended image
- (UIImage * _Nullable)blendWithMask:(UIImage * _Nonnull)mask blendMode:(CIBlendKernel * _Nonnull)blendKernel samplingMethod:(enum ResizeSamplingMethod)samplingMethod opacity:(CGFloat)opacity SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
/// Uses an alpha mask to cutout maked regions, specifying with area of mask to keep.
/// \param alphaMask Alpha Mask with a single class.
///
/// \param segmentationRegion Region of alpha mask to remove.
///
/// \param samplingMethod Resizing sampling method to use.
///
/// \param context Optional Core Image context to use.  Defaults to
/// <code>FritzVisionImage.sharedContext</code>
///
///
/// returns:
/// Masked image.
- (UIImage * _Nullable)maskWithImage:(UIImage * _Nonnull)alphaMask removingPixelsIn:(enum FritzSegmentationRegion)segmentationRegion samplingMethod:(enum ResizeSamplingMethod)samplingMethod context:(CIContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
- (CVPixelBufferRef _Nullable)rotate SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "rotated");
/// Returns image applying rotation from <code>metatadata</code>.
- (UIImage * _Nullable)rotated SWIFT_WARN_UNUSED_RESULT;
/// Returns image applying rotation from <code>metatadata</code>.
- (UIImage * _Nullable)resizedToSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
/// Dimensions of FritzVisionImage, after rotation
@property (nonatomic, readonly) CGSize size;
@end


SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImage (SWIFT_EXTENSION(FritzVision))
- (UIImage * _Nullable)toImage SWIFT_WARN_UNUSED_RESULT;
- (CVPixelBufferRef _Nullable)toPixelBuffer SWIFT_WARN_UNUSED_RESULT;
@end






SWIFT_CLASS_NAMED("FritzVisionImageMetadata") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionImageMetadata : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Orientation defaults to <code>FritzImageOrientation.right</code> which should work for rear facing cameras with a device orientation of Portrait.
@property (nonatomic) enum FritzImageOrientation orientation;
@property (nonatomic, readonly) CGImagePropertyOrientation cgOrientation;
@end


/// Represents a label for an image.
SWIFT_CLASS_NAMED("FritzVisionLabel") SWIFT_AVAILABILITY(watchos,introduced=4.0) SWIFT_AVAILABILITY(tvos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_AVAILABILITY(macos,introduced=10.13)
@interface FritzVisionLabel : NSObject
/// Human readable string of detected label.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Prediction confidence for label in range of [0, 1]
@property (nonatomic, readonly) double confidence;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label confidence:(double)confidence OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FritzVisionLabelError, open) {
  FritzVisionLabelErrorNoVisionModel = 0,
};
static NSString * _Nonnull const FritzVisionLabelErrorDomain = @"FritzVision.FritzVisionLabelError";

@class FritzVisionLabelModelOptions;

SWIFT_CLASS("_TtC11FritzVision25FritzVisionLabelPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLabelPredictor : BasePredictor
/// Predict poses from a FritzImage.
/// \param input The image to use to dectect poses.
///
/// \param options The options used to configure the pose results.
///
/// \param completion Handler to call back on the main thread with poses or error.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionLabelModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<FritzVisionLabel *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionLabelModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLabelModelFast : FritzVisionLabelPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
+ (void)setModelConfig:(FritzModelConfiguration * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
/// Is WiFi required to download pose model over the air.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionLabelModelOptions")
@interface FritzVisionLabelModelOptions : NSObject
/// Confidence threshold for prediction results in the range of [0, 1], default is 0.6.
@property (nonatomic) double threshold;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
/// Number of results to return from request.
@property (nonatomic) NSInteger numResults;
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionLivingRoomClass")
@interface FritzVisionLivingRoomClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull chair;)
+ (ModelSegmentationClass * _Nonnull)chair SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull wall;)
+ (ModelSegmentationClass * _Nonnull)wall SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull coffeeTable;)
+ (ModelSegmentationClass * _Nonnull)coffeeTable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull ceiling;)
+ (ModelSegmentationClass * _Nonnull)ceiling SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull floor;)
+ (ModelSegmentationClass * _Nonnull)floor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bed;)
+ (ModelSegmentationClass * _Nonnull)bed SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull lamp;)
+ (ModelSegmentationClass * _Nonnull)lamp SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sofa;)
+ (ModelSegmentationClass * _Nonnull)sofa SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull windowpane;)
+ (ModelSegmentationClass * _Nonnull)windowpane SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull pillow;)
+ (ModelSegmentationClass * _Nonnull)pillow SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLivingRoomSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes SWIFT_UNAVAILABLE;
@end


/// Image segmentation model to detect common living room objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLivingRoomSegmentationModelAccurate : FritzVisionLivingRoomSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionLivingRoomSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common living room objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionLivingRoomSegmentationModelFast : FritzVisionLivingRoomSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionLivingRoomSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common living room objects.
SWIFT_CLASS_NAMED("FritzVisionLivingRoomSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionLivingRoomSegmentationModelSmall : FritzVisionLivingRoomSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionLivingRoomSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionObject") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionObject : NSObject
@property (nonatomic, readonly, strong) FritzVisionLabel * _Nonnull detectedLabel;
/// BoundingBox of detected object.
@property (nonatomic, readonly, strong) BoundingBox * _Nonnull boundingBox;
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
@property (nonatomic, readonly) double confidence;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithLabel:(FritzVisionLabel * _Nonnull)label boundingBox:(BoundingBox * _Nonnull)boundingBox OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FritzVisionObjectModelOptions;

SWIFT_CLASS_NAMED("FritzVisionObjectPredictor") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionObjectPredictor : BasePredictor
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
/// Initialize Object model using a custom model with accessible class names.
/// For models with built-in post processing and built-in class names.
/// Uses default class names as a fall back if none are found.
/// \param model IdentifiedModel to use
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
/// Initialize Object model using a custom model with the given class names.
/// For models with built-in post processing without built-in class names.
/// \param identifiedModel IdentifiedModel to use
///
/// \param classNames Labels for objects
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)identifiedModel processedLabels:(NSArray<NSString *> * _Nonnull)classNames OBJC_DESIGNATED_INITIALIZER;
/// Run prediction for vision object model.
/// \param input Image or buffer to run model on.
///
/// \param options Options for model execution.
///
/// \param completion The block to invoke after the prediction request has finished processing.
///
- (void)predict:(FritzVisionImage * _Nonnull)input options:(FritzVisionObjectModelOptions * _Nonnull)options completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<FritzVisionObject *> * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("FritzVisionObjectModelFast") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionObjectModelFast : FritzVisionObjectPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionObjectModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)identifiedModel processedLabels:(NSArray<NSString *> * _Nonnull)classNames OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FritzVisionObjectModelOptions")
@interface FritzVisionObjectModelOptions : NSObject
/// Confidence threshold for prediction results in the range of [0, 1], default is 0.6.
@property (nonatomic) double threshold;
/// Threshold for overlap of items within a single class in range [0, 1].  Lower values are more strict.
@property (nonatomic) double iouThreshold;
/// Number of results to return from request.
@property (nonatomic) NSInteger numResults;
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic, readonly) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionOutdoorClass")
@interface FritzVisionOutdoorClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull building;)
+ (ModelSegmentationClass * _Nonnull)building SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sky;)
+ (ModelSegmentationClass * _Nonnull)sky SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull tree;)
+ (ModelSegmentationClass * _Nonnull)tree SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sidewalk;)
+ (ModelSegmentationClass * _Nonnull)sidewalk SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull ground;)
+ (ModelSegmentationClass * _Nonnull)ground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull car;)
+ (ModelSegmentationClass * _Nonnull)car SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull water;)
+ (ModelSegmentationClass * _Nonnull)water SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull house;)
+ (ModelSegmentationClass * _Nonnull)house SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull fence;)
+ (ModelSegmentationClass * _Nonnull)fence SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sign;)
+ (ModelSegmentationClass * _Nonnull)sign SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull skyscraper;)
+ (ModelSegmentationClass * _Nonnull)skyscraper SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bridge;)
+ (ModelSegmentationClass * _Nonnull)bridge SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull river;)
+ (ModelSegmentationClass * _Nonnull)river SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bus;)
+ (ModelSegmentationClass * _Nonnull)bus SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull truck;)
+ (ModelSegmentationClass * _Nonnull)truck SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull van;)
+ (ModelSegmentationClass * _Nonnull)van SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull motorbike;)
+ (ModelSegmentationClass * _Nonnull)motorbike SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull bicycle;)
+ (ModelSegmentationClass * _Nonnull)bicycle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull trafficLight;)
+ (ModelSegmentationClass * _Nonnull)trafficLight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull person;)
+ (ModelSegmentationClass * _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionOutdoorSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionOutdoorSegmentationModelAccurate : FritzVisionOutdoorSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionOutdoorSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionOutdoorSegmentationModelFast : FritzVisionOutdoorSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionOutdoorSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionOutdoorSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionOutdoorSegmentationModelSmall : FritzVisionOutdoorSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionOutdoorSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



/// Class labels for FritzVisionPeopleAndPetSegmentationMediumModel
SWIFT_CLASS_NAMED("FritzVisionPeopleAndPetClass")
@interface FritzVisionPeopleAndPetSegmentationMediumClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull petOrPerson;)
+ (ModelSegmentationClass * _Nonnull)petOrPerson SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people and pets.
SWIFT_CLASS_NAMED("FritzVisionPeopleAndPetSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleAndPetSegmentationMediumModel : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people and pets.
SWIFT_CLASS_NAMED("FritzVisionPeopleAndPetSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleAndPetSegmentationModelAccurate : FritzVisionPeopleAndPetSegmentationMediumModel
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleAndPetSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



/// Class labels for FritzVisionPeoplePredictor
SWIFT_CLASS_NAMED("FritzVisionPeopleClass")
@interface FritzVisionPeopleClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull person;)
+ (ModelSegmentationClass * _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Predictor that takes predicts pixels that are people
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleSegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people.
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleSegmentationModelAccurate : FritzVisionPeopleSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people.
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPeopleSegmentationModelFast : FritzVisionPeopleSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect people.
SWIFT_CLASS_NAMED("FritzVisionPeopleSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionPeopleSegmentationModelSmall : FritzVisionPeopleSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPeopleSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionPetClass")
@interface FritzVisionPetClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull pet;)
+ (ModelSegmentationClass * _Nonnull)pet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPetSegmentationPredictor : FritzVisionSegmentationModel
/// Build Pet Segmentation Model with provided model.
/// \param model Model to use
///
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
/// Build Pet Segmentation Model with provided model.
/// \param model Model to use
///
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPetSegmentationModelAccurate : FritzVisionPetSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPetSegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPetSegmentationModelFast : FritzVisionPetSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPetSegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect pets.
SWIFT_CLASS_NAMED("FritzVisionPetSegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionPetSegmentationModelSmall : FritzVisionPetSegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionPetSegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



/// Model used to create a 3D pose from 2D pose
SWIFT_CLASS("_TtC11FritzVision27FritzVisionPoseLiftingModel") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionPoseLiftingModel : BasePredictor
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
@end






/// Options for Pose Model.
SWIFT_CLASS_NAMED("FritzVisionPoseModelOptions")
@interface FritzVisionPoseModelOptions : NSObject
/// Crop and scale option. Default value is scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
/// Minimum score a part must have to potentially build a new pose. The pose will include parts below this
/// threshold, but a part below this threshold will not trigger a new pose instance to be built.
@property (nonatomic) double minPartThreshold;
/// Minimum score a pose must have to be included in results.
@property (nonatomic) double minPoseThreshold;
/// NMS radius for pose
@property (nonatomic) NSInteger nmsRadius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11FritzVision34FritzVisionSegmentationMaskOptions") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSegmentationMaskOptions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("FritzVisionSegmentationModelOptions")
@interface FritzVisionSegmentationModelOptions : NSObject
/// Crop and scale option. Default value is scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model). In iOS 12, scaleFit
/// would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// Takes precedence over <code>forceCoreMLPrediction</code>.  Core ML predictions do not currently work
/// with YUV pixel formats, which are used in ARKit. Setting this to true will force the
/// predictor to use the Vision framework.  Unfortunately, in iOS 11.1 - 12.1 there is a
/// bug that incorrectly crops images with the imageCropAndScaleOption set to <code>.scaleFit</code>.
/// However, if you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MLMultiArray;

SWIFT_CLASS_NAMED("FritzVisionSegmentationResult") SWIFT_AVAILABILITY(watchos,introduced=4.0) SWIFT_AVAILABILITY(tvos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_AVAILABILITY(macos,introduced=10.13)
@interface FritzVisionSegmentationResult : NSObject
/// Height of model output array.
@property (nonatomic, readonly) NSInteger height;
/// Width of model output array.
@property (nonatomic, readonly) NSInteger width;
/// Model classes.
@property (nonatomic, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull classes;
/// Raw MLMultiArray result from prediction.
@property (nonatomic, readonly, strong) MLMultiArray * _Nonnull predictionResult;
- (NSArray<NSNumber *> * _Nonnull)getArrayOfConfidenceScoresforClass:(ModelSegmentationClass * _Nonnull)segmentClass ClippingAbove:(double)threshold zeroingBelow:(double)minThreshold SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSegmentationResult (SWIFT_EXTENSION(FritzVision))
/// Generate UIImage mask from most likely class at each pixel.
/// The generated image size will fit the original image passed into prediction, applying rotation.
/// If the image was center cropped, will return an image that covers the cropped image.
/// \param minScore Minimum threshold value needed to count. By default zero.
/// You can set this property to filter out classes that may be the most likely but still
/// have a lower probability.
///
/// \param maxAlpha Alpha value of the color (0-255) for detected classes. By default completely opaque.
///
/// \param resize If true (default) mask will be scaled to the size of the input image.
///
/// \param blurRadius The radius to blur the edges of the mask.
///
///
/// returns:
/// Image
- (UIImage * _Nullable)buildMultiClassMaskWithMinAcceptedScore:(double)minScore maxAlpha:(uint8_t)maxAlpha resize:(BOOL)resize blurRadius:(CGFloat)blurRadius SWIFT_WARN_UNUSED_RESULT;
/// Generate UIImage mask for given class.
/// The generated image size will fit the original image passed into prediction, applying rotation.
/// If the image was center cropped, will return an image that covers the cropped image.
/// \param segmentClass Class for the mask.
///
/// \param clippingThreshold All confidence scores above this value will be clipped to 1.
/// Range [0.0-1.0].
///
/// \param zeroingThreshold All confidence scores below this value will be set to 0.
/// Range [0.0-1.0].
///
/// \param maxAlpha Maximum alpha value of mask. Confidence scores will be multiplied by this value
/// after clipping and zeroing.
///
/// \param resize If true, resizes mask to input image size.
///
/// \param color The color of mask.
///
/// \param blurRadius The radius to blur the edges of the mask.
///
///
/// returns:
/// Mask for class.
- (UIImage * _Nullable)buildSingleClassMask:(ModelSegmentationClass * _Nonnull)segmentClass clippingScoresAbove:(double)clippingThreshold zeroingScoresBelow:(double)zeroingThreshold maxAlpha:(uint8_t)maxAlpha resize:(BOOL)resize color:(UIColor * _Nullable)color blurRadius:(CGFloat)blurRadius SWIFT_WARN_UNUSED_RESULT;
/// Generate UIImage mask for given class.
/// The generated image size will fit the original image passed into prediction, applying rotation.
/// If the image was center cropped, will return an image that covers the cropped image.
/// \param segmentClass Class for the mask.
///
/// \param options Options for the mask.
///
/// \param resize If true, resizes mask to input image size.
///
///
/// returns:
/// Mask for class.
- (UIImage * _Nullable)buildSingleClassMask:(ModelSegmentationClass * _Nonnull)segmentClass options:(FritzVisionSegmentationMaskOptions * _Nonnull)options resize:(BOOL)resize SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("FritzVisionSkyClass")
@interface FritzVisionSkyClass : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull none;)
+ (ModelSegmentationClass * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ModelSegmentationClass * _Nonnull sky;)
+ (ModelSegmentationClass * _Nonnull)sky SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ModelSegmentationClass *> * _Nonnull allClasses;)
+ (NSArray<ModelSegmentationClass *> * _Nonnull)allClasses SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect the sky.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationPredictor") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSkySegmentationPredictor : FritzVisionSegmentationModel
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect the sky.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationModelAccurate") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSkySegmentationModelAccurate : FritzVisionSkySegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionSkySegmentationModelAccurate * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect common outdoor objects.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationModelFast") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionSkySegmentationModelFast : FritzVisionSkySegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionSkySegmentationModelFast * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end


/// Image segmentation model to detect the sky.
SWIFT_CLASS_NAMED("FritzVisionSkySegmentationModelSmall") SWIFT_AVAILABILITY(ios,introduced=12.0)
@interface FritzVisionSkySegmentationModelSmall : FritzVisionSkySegmentationPredictor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzModelConfiguration * _Nonnull modelConfig;)
+ (FritzModelConfiguration * _Nonnull)modelConfig SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzManagedModel * _Nonnull managedModel;)
+ (FritzManagedModel * _Nonnull)managedModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL wifiRequiredForModelDownload;)
+ (BOOL)wifiRequiredForModelDownload SWIFT_WARN_UNUSED_RESULT;
+ (void)setWifiRequiredForModelDownload:(BOOL)value;
/// Fetch model. Downloads model if model has not been downloaded before.
/// \param completionHandler CompletionHandler called after fetchModel request finishes.
///
+ (void)fetchModelWithCompletionHandler:(void (^ _Nonnull)(FritzVisionSkySegmentationModelSmall * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithModel:(FritzMLModel * _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes managedModel:(FritzManagedModel * _Nonnull)managedModel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifiedModel:(id <FritzSwiftIdentifiedModel> _Nonnull)model name:(NSString * _Nonnull)name classes:(NSArray<ModelSegmentationClass *> * _Nonnull)classes OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11FritzVision21FritzVisionStyleModel") SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_DEPRECATED_MSG("", "FritzVisionStylePredictor")
@interface FritzVisionStyleModel : FritzVisionStylePredictor
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithFritzMLModel:(FritzMLModel * _Nonnull)model managedModel:(FritzManagedModel * _Nonnull)managedModel error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Options for running style transfer models.
SWIFT_CLASS_NAMED("FritzVisionStyleModelOptions")
@interface FritzVisionStyleModelOptions : NSObject
/// Crop and scale option. Default option is .scaleFit.
@property (nonatomic) enum FritzVisionCropAndScale imageCropAndScaleOption;
/// Force predictions to use Core ML (if supported by model).
/// In iOS 12, scaleFit would incorrectly crop image.  When True (or on iOS 12) model will run using CoreML.
@property (nonatomic) BOOL forceCoreMLPrediction;
/// Force predictions to use the Vision framework (if supported by model).
/// If you are using ARKit, you must set this to true.
@property (nonatomic) BOOL forceVisionPrediction;
/// Resize the output to match the FritzVisionImage size.
@property (nonatomic) BOOL resizeOutputToInputDimensions;
/// Sets dimensions of input image for flexible model. Note that setting this to higher resolutions will increase
/// model processing time.
@property (nonatomic, strong) FlexibleModelDimensions * _Nonnull flexibleModelDimensions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionStylePredictor (SWIFT_EXTENSION(FritzVision))
/// Fetch and load Style Models for the given tags.
/// Note that this instantiates all models which could cause memory pressure if you are loading many models.
/// If you do not want to immediately instantiate the models, create a ModelTagManager and manage loading yourself.
/// \param tags List of tags to load models for.
///
/// \param wifiRequiredForModelDownload If true, client must be connected to a wifi network to download a model. Default is false.
///
/// \param completionHandler Completion handler with instantiated FritzVisionStylePredictors
///
+ (void)fetchStyleModelsForTags:(NSArray<NSString *> * _Nonnull)tags wifiRequiredForModelDownload:(BOOL)wifiRequiredForModelDownload withCompletionHandler:(void (^ _Nonnull)(NSArray<FritzVisionStylePredictor *> * _Nullable, NSError * _Nullable))completionHandler;
@end






SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface FritzVisionStylePredictor (SWIFT_EXTENSION(FritzVision))
/// Model metadata set in webapp.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Model tags set in webapp.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, FritzHumanSkeleton, "HumanSkeleton", open) {
  FritzHumanSkeletonNose = 0,
  FritzHumanSkeletonLeftEye = 1,
  FritzHumanSkeletonRightEye = 2,
  FritzHumanSkeletonLeftEar = 3,
  FritzHumanSkeletonRightEar = 4,
  FritzHumanSkeletonLeftShoulder = 5,
  FritzHumanSkeletonRightShoulder = 6,
  FritzHumanSkeletonLeftElbow = 7,
  FritzHumanSkeletonRightElbow = 8,
  FritzHumanSkeletonLeftWrist = 9,
  FritzHumanSkeletonRightWrist = 10,
  FritzHumanSkeletonLeftHip = 11,
  FritzHumanSkeletonRightHip = 12,
  FritzHumanSkeletonLeftKnee = 13,
  FritzHumanSkeletonRightKnee = 14,
  FritzHumanSkeletonLeftAnkle = 15,
  FritzHumanSkeletonRightAnkle = 16,
};




SWIFT_CLASS_NAMED("ModelSegmentationClass")
@interface ModelSegmentationClass : NSObject
/// Index in output array from model.
@property (nonatomic, readonly) NSInteger index;
/// Label name for Model Segmentation Class.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11FritzVision7Point3D")
@interface Point3D : NSObject
@property (nonatomic, readonly) CGFloat x;
@property (nonatomic, readonly) CGFloat y;
@property (nonatomic, readonly) CGFloat z;
- (nonnull instancetype)initWithX:(CGFloat)x y:(CGFloat)y z:(CGFloat)z OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (NSArray<NSNumber *> * _Nonnull)toArray SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Point3D (SWIFT_EXTENSION(FritzVision))
- (nonnull instancetype)initWith:(NSArray<NSNumber *> * _Nonnull)array;
@end






/// Options for Pose Model.
SWIFT_CLASS("_TtC11FritzVision27PoseLiftingPredictorOptions")
@interface PoseLiftingPredictorOptions : NSObject
/// Default Pose model options.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PoseLiftingPredictorOptions * _Nonnull defaults;)
+ (PoseLiftingPredictorOptions * _Nonnull)defaults SWIFT_WARN_UNUSED_RESULT;
/// If true only uses CPU to run predictions.
@property (nonatomic) BOOL useCPUOnly;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, FritzSegmentationRegion, "SegmentationRegion", open) {
/// Foreground is the region of the image where the alpha value of a mask is greater than 0.
  FritzSegmentationRegionForeground = 0,
/// Background is the region of the image where the alpha value of a mask is 0.
  FritzSegmentationRegionBackground = 1,
};


SWIFT_CLASS_NAMED("StyleOutputDimensions") SWIFT_DEPRECATED_MSG("", "FlexibleModelDimensions")
@interface StyleOutputDimensions : FlexibleModelDimensions
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithWidth:(NSInteger)width withHeight:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
@end















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#endif
